import 'dart:async';
import 'dart:convert';
import 'dart:html' as html;
import 'dart:js' as js;
import 'package:flutter/material.dart';
import 'package:http/http.dart' as http;
import '../services/telegram_webapp_service.dart';
import '../services/api_service.dart' as ApiSvc;

class InviteFriendsScreen extends StatefulWidget {
  final String? referralCode;
  
  const InviteFriendsScreen({super.key, this.referralCode});

  @override
  State<InviteFriendsScreen> createState() => _InviteFriendsScreenState();
}

class _InviteFriendsScreenState extends State<InviteFriendsScreen> {
  bool _isLoading = false;
  String? _referralCode;
  String? _referralLink;
  int _invitesSent = 0;

  @override
  void initState() {
    super.initState();
    _loadReferralCode();
    TelegramWebAppService.disableVerticalSwipe();
  }

  Future<void> _loadReferralCode() async {
    final userId = TelegramWebAppService.getUserId();
    if (userId != null) {
      try {
        // –ë–µ—Ä—ë–º/—Å–æ–∑–¥–∞—ë–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥ —Å—Ç—Ä–æ–≥–æ —á–µ—Ä–µ–∑ API (—Å–µ—Ä–≤–µ—Ä –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç/—á–∏—Ç–∞–µ—Ç –∏–∑ –ë–î)
        final code = await ApiSvc.ApiService.getOrCreateReferralCode(userId);
        if (code != null && code.isNotEmpty) {
          setState(() {
            _referralCode = code;
            _referralLink = "https://t.me/GTM_ROBOT?start=$_referralCode";
          });
          return;
        }
      } catch (e) {
        print('Error loading referral code: $e');
      }
    }
    // –û—à–∏–±–∫–∞ ‚Äî –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–ª–∏–µ–Ω—Ç—Å–∫–∏–µ —Ä–µ—Ñ–∫–æ–¥—ã
    setState(() {
      _referralCode = null;
      _referralLink = null;
    });
    TelegramWebAppService.showAlert('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }



  Future<void> _shareWithFriends() async {
    setState(() => _isLoading = true);
      final success = await TelegramWebAppService.inviteFriendsWithShare();
    setState(() => _isLoading = false);
      if (success) {
      // –í—Å—ë –æ–∫, –¥–∏–∞–ª–æ–≥ –æ—Ç–∫—Ä—ã–ª—Å—è
      } else {
      // Fallback: –ø–æ–∫–∞–∑–∞—Ç—å —Å—Å—ã–ª–∫—É
    }
  }

  Future<bool> _showTelegramShareOptions() async {
    try {
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π –¥–∏–∞–ª–æ–≥ —Å –æ–ø—Ü–∏—è–º–∏
      final result = await TelegramWebAppService.showMainButtonPopup({
        'title': '–ü–æ–¥–µ–ª–∏—Ç—å—Å—è —Å –¥—Ä—É–∑—å—è–º–∏',
        'message': '–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è:',
        'buttons': [
          {
            'id': 'copy_link',
            'type': 'default',
            'text': '–°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Å—Å—ã–ª–∫—É'
          },
          {
            'id': 'show_link',
            'type': 'default',
            'text': '–ü–æ–∫–∞–∑–∞—Ç—å —Å—Å—ã–ª–∫—É'
          },
          {
            'id': 'cancel',
            'type': 'cancel',
            'text': '–û—Ç–º–µ–Ω–∞'
          }
        ],
      });

      if (result == true) {
        // –ü–æ—Å–∫–æ–ª—å–∫—É showMainButtonPopup –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç bool, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback
        return await _copyLinkToClipboard();
      }
      
      return false;
    } catch (e) {
      print('Error showing share options: $e');
      // Fallback: –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Å—ã–ª–∫—É –≤ –¥–∏–∞–ª–æ–≥–µ
      _showLinkDialog();
      return true;
    }
  }

  Future<bool> _copyLinkToClipboard() async {
    try {
      final success = await TelegramWebAppService.copyToClipboard(_referralLink ?? '');
      
      if (success) {
        _showSuccess('–°—Å—ã–ª–∫–∞ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞! –¢–µ–ø–µ—Ä—å –º–æ–∂–µ—Ç–µ –ø–æ–¥–µ–ª–∏—Ç—å—Å—è –µ—é —Å –¥—Ä—É–∑—å—è–º–∏.');
        return true;
      } else {
        // Fallback: –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Å—ã–ª–∫—É –≤ –¥–∏–∞–ª–æ–≥–µ
        _showLinkDialog();
        return true;
      }
    } catch (e) {
      print('Error copying link: $e');
      // Fallback: –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Å—ã–ª–∫—É –≤ –¥–∏–∞–ª–æ–≥–µ
      _showLinkDialog();
      return true;
    }
  }

  void _showLinkDialog() {
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        backgroundColor: Colors.black87,
        title: const Text(
          '–°—Å—ã–ª–∫–∞ –¥–ª—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è',
          style: TextStyle(color: Colors.white, fontFamily: 'NauryzKeds'),
        ),
        content: Column(
          mainAxisSize: MainAxisSize.min,
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            const Text(
              '–°–∫–æ–ø–∏—Ä—É–π—Ç–µ —ç—Ç—É —Å—Å—ã–ª–∫—É –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –¥—Ä—É–∑—å—è–º:',
              style: TextStyle(color: Colors.white, fontFamily: 'NauryzKeds'),
            ),
            const SizedBox(height: 16),
            Container(
              padding: const EdgeInsets.all(12),
              decoration: BoxDecoration(
                color: Colors.grey[900],
                border: Border.all(color: Colors.white24),
              ),
              child: SelectableText(
                _referralLink ?? '–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Å—ã–ª–∫–∏',
                style: const TextStyle(
                  color: Colors.white,
                  fontFamily: 'monospace',
                  fontSize: 12,
                ),
              ),
            ),
            const SizedBox(height: 16),
            const Text(
              '–ó–∞ –∫–∞–∂–¥–æ–≥–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω–æ–≥–æ –¥—Ä—É–≥–∞ –ø–æ–ª—É—á–∏—Ç–µ +100 XP!',
              style: TextStyle(color: Colors.green, fontFamily: 'NauryzKeds', fontSize: 14),
            ),
          ],
        ),
        actions: [
          TextButton(
            onPressed: () => Navigator.of(context).pop(),
            child: const Text(
              '–ó–∞–∫—Ä—ã—Ç—å',
              style: TextStyle(color: Color(0xFFFF6EC7)),
            ),
          ),
        ],
      ),
    );
  }

  void _showBrowserInstructions() {
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        backgroundColor: Colors.black87,
        title: const Text(
          '–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –¥—Ä—É–∑–µ–π',
          style: TextStyle(color: Colors.white, fontFamily: 'NauryzKeds'),
        ),
        content: Column(
          mainAxisSize: MainAxisSize.min,
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            const Text(
              '–î–ª—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –¥—Ä—É–∑–µ–π:',
              style: TextStyle(color: Colors.white, fontFamily: 'NauryzKeds'),
            ),
            const SizedBox(height: 12),
            const Text(
              '1. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∏–∂–µ\n'
              '2. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –¥—Ä—É–∑—å—è–º –≤ Telegram\n'
              '3. –ó–∞ –∫–∞–∂–¥–æ–≥–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω–æ–≥–æ –¥—Ä—É–≥–∞ –ø–æ–ª—É—á–∏—Ç–µ +100 XP',
              style: TextStyle(color: Colors.white70, fontFamily: 'NauryzKeds'),
            ),
            const SizedBox(height: 16),
            Container(
              padding: const EdgeInsets.all(12),
              decoration: BoxDecoration(
                color: Colors.grey[900],
                border: Border.all(color: Colors.white24),
              ),
              child: SelectableText(
                _referralLink ?? '–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Å—ã–ª–∫–∏',
                style: const TextStyle(
                  color: Colors.white,
                  fontFamily: 'monospace',
                  fontSize: 12,
                ),
              ),
            ),
          ],
        ),
        actions: [
          TextButton(
            onPressed: () => Navigator.of(context).pop(),
            child: const Text(
              '–ó–∞–∫—Ä—ã—Ç—å',
              style: TextStyle(color: Color(0xFFFF6EC7)),
            ),
          ),
        ],
      ),
    );
  }

  String _generateInviteText() {
    return '''üñ§ –ü—Ä–∏–≤–µ—Ç! –ù–∞—à—ë–ª –∫—Ä—É—Ç—É—é –ø–ª–∞—Ç—Ñ–æ—Ä–º—É ‚Äî GOTHAM'S TOP MODEL! ‚ú®

üî• –ß—Ç–æ —Ç—É—Ç –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç:
‚Ä¢ ü§ñ AI-–ø–æ–∏—Å–∫ –º–∞—Å—Ç–µ—Ä–æ–≤ –ø–æ —Ñ–æ—Ç–æ
‚Ä¢ üñ§ –ó–∞–ø–∏—Å—å –∫ —Ç–æ–ø –∞—Ä—Ç–∏—Å—Ç–∞–º: —Ç–∞—Ç—É, –ø–∏—Ä—Å–∏–Ω–≥, –æ–∫—Ä–∞—à–∏–≤–∞–Ω–∏–µ
‚Ä¢ üí∏ –†–æ–∑—ã–≥—Ä—ã—à–∏ –Ω–∞ >130,000‚ÇΩ
‚Ä¢ üíÑ –°–∫–∏–¥–∫–∏ 8% –Ω–∞ –±—å—é—Ç–∏-—É—Å–ª—É–≥–∏
‚Ä¢ üéÄ –ü–æ–¥–∞—Ä–æ—á–Ω—ã–µ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã
‚Ä¢ üó®Ô∏è –ë–æ–ª—å—à–æ–π —á–∞—Ç –º–µ–∂–¥—É –º–∞—Å—Ç–µ—Ä–∞–º–∏ –∏ –∫–ª–∏–µ–Ω—Ç–∞–º–∏

üå™Ô∏è –ê –≤–ø–µ—Ä–µ–¥–∏:
‚Ä¢ üßÉ –î—Ä–æ–ø—ã —Å –ª–∏–º–∏—Ç–∫–∞–º–∏ –∏ —Å—Ç–∏–ª–µ–º
‚Ä¢ üñ§ –ú–µ–º—ã –∏ –∫—Ä—É—Ç—ã–µ –∫–æ–ª–ª–∞–±—ã
‚Ä¢ ü•Ä –î–≤–∏–∂, –∏–Ω—Ç—Ä–∏–≥–∏ –∏ —Å—é—Ä–ø—Ä–∏–∑—ã

üéÅ –•–æ—á–µ—à—å –±–æ–Ω—É—Å—ã? –õ–æ–≤–∏:
$_referralLink

üíó –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Å—è ‚Äî –∏ –±—É–¥—å –≤ –∏–≥—Ä–µ üé≤
#GTM #GothamsTopModel #Giveaway''';
  }

  void _showError(String message) {
    TelegramWebAppService.showAlert(message);
  }

  void _showSuccess(String message) {
    TelegramWebAppService.showAlert(message);
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: Colors.black,
      body: Stack(
        children: [
          Positioned.fill(
            child: Image.asset(
              'assets/giveaway_banner.png',
              fit: BoxFit.cover,
            ),
          ),
          Positioned.fill(
            child: Container(
              color: Colors.black.withOpacity(0.18),
            ),
          ),
          // –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥
          Positioned(
            top: 36,
            left: 12,
            child: IconButton(
              icon: const Icon(Icons.arrow_back_ios_new_rounded, color: Colors.white, size: 28),
              onPressed: () => Navigator.of(context).maybePop(),
              splashRadius: 24,
            ),
          ),
          SafeArea(
            child: Padding(
              padding: const EdgeInsets.all(24),
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  const SizedBox(height: 40),
                  const Text(
                    '–ü–æ–¥–µ–ª–∏—Ç—å—Å—è —Å –¥—Ä—É–∑—å—è–º–∏',
                    style: TextStyle(
                      color: Colors.white,
                      fontFamily: 'NauryzKeds',
                      fontSize: 32,
                      fontWeight: FontWeight.bold,
                      letterSpacing: 1.2,
                    ),
                  ),
                  const SizedBox(height: 8),
                  const Text(
                    '–ü—Ä–∏–≥–ª–∞—Å–∏ –¥—Ä—É–∑–µ–π –∏ –ø–æ–ª—É—á–∏ –±–æ–Ω—É—Å—ã',
                    style: TextStyle(
                      color: Colors.white70,
                      fontFamily: 'NauryzKeds',
                      fontSize: 18,
                    ),
                  ),
                  const SizedBox(height: 32),
                  
                  // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ–Ω—É—Å–∞—Ö
                  Container(
                    padding: const EdgeInsets.all(20),
                    decoration: BoxDecoration(
                      color: Colors.white.withOpacity(0.08),
                      border: Border.all(color: Colors.white, width: 1.5),
                    ),
                    child: Column(
                      children: [
                        const Row(
                          children: [
                            Icon(Icons.star, color: Color(0xFFFF6EC7), size: 24),
                            SizedBox(width: 12),
                            Text(
                              '–ë–æ–Ω—É—Å—ã –∑–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è:',
                              style: TextStyle(
                                color: Colors.white,
                                fontFamily: 'NauryzKeds',
                                fontSize: 20,
                                fontWeight: FontWeight.bold,
                              ),
                            ),
                          ],
                        ),
                        const SizedBox(height: 16),
                        const Row(
                          children: [
                            Icon(Icons.check_circle, color: Colors.green, size: 20),
                            SizedBox(width: 12),
                            Text(
                              '+100 XP —Ç–µ–±–µ –∑–∞ –∫–∞–∂–¥–æ–≥–æ –¥—Ä—É–≥–∞',
                              style: TextStyle(
                                color: Colors.white,
                                fontFamily: 'NauryzKeds',
                                fontSize: 16,
                              ),
                            ),
                          ],
                        ),
                        const SizedBox(height: 8),
                        const Row(
                          children: [
                            Icon(Icons.check_circle, color: Colors.green, size: 20),
                            SizedBox(width: 12),
                            Text(
                              '+100 XP –¥—Ä—É–≥—É –∑–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é',
                              style: TextStyle(
                                color: Colors.white,
                                fontFamily: 'NauryzKeds',
                                fontSize: 16,
                              ),
                            ),
                          ],
                        ),
                        const SizedBox(height: 8),
                        const Row(
                          children: [
                            Icon(Icons.check_circle, color: Colors.green, size: 20),
                            SizedBox(width: 12),
                            Text(
                              '–®–∞–Ω—Å –≤—ã–∏–≥—Ä–∞—Ç—å –ø—Ä–∏–∑—ã –Ω–∞ 123,500‚ÇΩ',
                              style: TextStyle(
                                color: Colors.white,
                                fontFamily: 'NauryzKeds',
                                fontSize: 16,
                              ),
                            ),
                          ],
                        ),
                      ],
                    ),
                  ),
                  
                  const SizedBox(height: 24),
                  
                  // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π
                  if (_invitesSent > 0) ...[
                    Container(
                      padding: const EdgeInsets.all(16),
                      decoration: BoxDecoration(
                        color: Colors.green.withOpacity(0.2),
                        border: Border.all(color: Colors.green.withOpacity(0.5)),
                      ),
                      child: Row(
                        children: [
                          const Icon(Icons.check_circle, color: Colors.green, size: 24),
                          const SizedBox(width: 12),
                          Text(
                            '–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: $_invitesSent',
                            style: const TextStyle(
                              color: Colors.green,
                              fontFamily: 'NauryzKeds',
                              fontSize: 16,
                              fontWeight: FontWeight.bold,
                            ),
                          ),
                        ],
                      ),
                    ),
                    const SizedBox(height: 24),
                  ],
                  
                  // –ö–Ω–æ–ø–∫–∞ –ø–æ–¥–µ–ª–∏—Ç—å—Å—è
                  SizedBox(
                    width: double.infinity,
                    child: ElevatedButton.icon(
                      onPressed: _isLoading ? null : _shareWithFriends,
                      icon: _isLoading 
                          ? const SizedBox(
                              width: 20,
                              height: 20,
                              child: CircularProgressIndicator(
                                strokeWidth: 2,
                                valueColor: AlwaysStoppedAnimation<Color>(Colors.white),
                              ),
                            )
                          : const Icon(Icons.share, color: Colors.white, size: 28),
                      label: Text(
                        _isLoading ? '–ó–∞–≥—Ä—É–∑–∫–∞...' : '–ü–æ–∫–∞–∑–∞—Ç—å —Å—Å—ã–ª–∫—É',
                        style: const TextStyle(
                          fontFamily: 'NauryzKeds',
                          fontWeight: FontWeight.bold,
                          fontSize: 20,
                          color: Colors.white,
                          letterSpacing: 1.1,
                        ),
                      ),
                      style: ElevatedButton.styleFrom(
                        backgroundColor: const Color(0xFFFF6EC7),
                        foregroundColor: Colors.white,
                        shape: const RoundedRectangleBorder(
                          borderRadius: BorderRadius.zero,
                        ),
                        padding: const EdgeInsets.symmetric(vertical: 20),
                        elevation: 0,
                      ),
                    ),
                  ),
                  
                  const SizedBox(height: 16),
                  
                  // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
                  Container(
                    padding: const EdgeInsets.all(16),
                    decoration: BoxDecoration(
                      color: Colors.white.withOpacity(0.05),
                      border: Border.all(color: Colors.white24),
                    ),
                    child: const Column(
                      crossAxisAlignment: CrossAxisAlignment.start,
                      children: [
                        Text(
                          'üí° –ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:',
                          style: TextStyle(
                            color: Colors.white,
                            fontFamily: 'NauryzKeds',
                            fontSize: 16,
                            fontWeight: FontWeight.bold,
                          ),
                        ),
                        SizedBox(height: 8),
                        Text(
                          '1. –ù–∞–∂–º–∏—Ç–µ "–ü–æ–¥–µ–ª–∏—Ç—å—Å—è —Å –¥—Ä—É–∑—å—è–º–∏"\n'
                          '2. –í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–∑–µ–π –∏–∑ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –∏–ª–∏ —á–∞—Ç–æ–≤\n'
                          '3. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–º –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ\n'
                          '4. –ü–æ–ª—É—á–∏—Ç–µ –±–æ–Ω—É—Å—ã –∑–∞ –∫–∞–∂–¥–æ–≥–æ –¥—Ä—É–≥–∞!',
                          style: TextStyle(
                            color: Colors.white70,
                            fontFamily: 'NauryzKeds',
                            fontSize: 14,
                          ),
                        ),
                      ],
                    ),
                  ),
                ],
              ),
            ),
          ),
        ],
      ),
    );
  }
} 