import 'package:flutter/material.dart';
import 'package:flutter/gestures.dart';
import 'role_selection_screen.dart';
// import 'invite_friends_screen.dart'; // –í—Ä–µ–º–µ–Ω–Ω–æ —É–±—Ä–∞–Ω–æ
import 'dart:async';
import 'dart:convert';
import 'dart:html' as html;
import 'package:url_launcher/url_launcher.dart';
import 'package:flutter/foundation.dart';
import '../services/telegram_webapp_service.dart';
import 'package:http/http.dart' as http;
import '../api_config.dart';
import 'package:shared_preferences/shared_preferences.dart';
import '../services/api_service.dart' as ApiSvc;

class GiveawayScreen extends StatefulWidget {
  const GiveawayScreen({super.key});

  @override
  State<GiveawayScreen> createState() => _GiveawayScreenState();
}

class _GiveawayScreenState extends State<GiveawayScreen> {
  late Timer _timer;
  Duration _timeLeft = Duration.zero;

  bool _task1Done = false;
  bool _task2Done = false;
  bool _task1ButtonPressed = false;
  bool _task2ButtonPressed = false;
  bool _canGoToApp = false;
  bool _isCheckButtonPressed = false;
  bool _isCheckingSubscriptions = false; // –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–æ–∫

  String? _username;
  int _tickets = 0; // –í—Å–µ–≥–æ –±–∏–ª–µ—Ç–æ–≤
  int _invitedFriends = 0; // –¢–æ–ª—å–∫–æ –∑–∞ –¥—Ä—É–∑–µ–π
  int _totalTickets = 0;

  String folderCounter = '0/1';
  String friendsCounter = '0/10';
  Color folderCounterColor = Colors.white.withOpacity(0.7);
  Color friendsCounterColor = Colors.white.withOpacity(0.7);
  int _giveawayTickets = 0; // —Å—É–º–º–∞ is_in_folder + invited_friends
  int _totalEarnedTickets = 0; // –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –±–∏–ª–µ—Ç–æ–≤

  String _telegramFolderUrl = 'https://t.me/addlist/qRX5VmLZF7E3M2U9';
  final DateTime giveawayDate = DateTime(2025, 8, 15, 18, 0, 0); // 15 –∞–≤–≥—É—Å—Ç–∞ 2025, 18:00

  bool get _isTask1Done => _tickets >= 1;
  bool get _isTask2Done => _invitedFriends > 0;

  @override
  void initState() {
    super.initState();
    _updateTimeLeft();
    _timer = Timer.periodic(const Duration(seconds: 1), (_) {
      _updateTimeLeft();
    });
    _loadSavedState();
    _fetchUserTickets();
    _fetchGiveawayStatus();
    TelegramWebAppService.disableVerticalSwipe();
  }

  void _updateTimeLeft() {
    final now = DateTime.now().toUtc().add(const Duration(hours: 3));
    setState(() {
      _timeLeft = giveawayDate.difference(now);
      if (_timeLeft.isNegative) {
        _timeLeft = Duration.zero;
      }
    });
  }

  Future<void> _fetchUserTickets() async {
    try {
      final userId = TelegramWebAppService.getUserId();
      if (userId == null) return;
      final prefs = await SharedPreferences.getInstance();
      final lastTicketCheck = prefs.getInt('last_ticket_check_$userId') ?? 0;
      final now = DateTime.now().millisecondsSinceEpoch;
      if (now - lastTicketCheck < 1 * 60 * 1000) {
        final cachedTickets = prefs.getInt('cached_tickets_$userId');
        final cachedUsername = prefs.getString('cached_username_$userId');
        final cachedTotal = prefs.getInt('cached_total_tickets');
        if (cachedTickets != null && cachedUsername != null && cachedTotal != null) {
          setState(() {
            _tickets = cachedTickets;
            _username = cachedUsername;
            _totalTickets = cachedTotal;
          });
          return;
        }
      }
      // –ë–µ—Ä–µ–º total_tickets —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      final response = await http.get(Uri.parse('${ApiConfig.apiBaseUrl}/users?telegram_id=eq.$userId&select=total_tickets,username'));
      if (response.statusCode == 200) {
        final data = jsonDecode(response.body ?? '[]');
        if (data is List && data.isNotEmpty) {
          final user = data[0];
          final tickets = user['total_tickets'] ?? 0;
          final username = user['username'] ?? '';
          setState(() {
            _tickets = tickets is int ? tickets : int.tryParse(tickets.toString()) ?? 0;
            _username = username;
          });
          await prefs.setInt('cached_tickets_$userId', _tickets);
          await prefs.setString('cached_username_$userId', username);
          await prefs.setInt('last_ticket_check_$userId', now);
        }
      }
      // –ü–æ–ª—É—á–∞–µ–º —Å—É–º–º—É total_tickets –ø–æ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º —á–µ—Ä–µ–∑ RPC (Supabase): get_total_all_tickets
      final rpcResponse = await http.post(
        Uri.parse('${ApiConfig.apiBaseUrl}/rpc/get_total_all_tickets'),
        headers: {'Content-Type': 'application/json'},
      );
      if (rpcResponse.statusCode == 200) {
        final body = jsonDecode(rpcResponse.body ?? '0');
        final totalTickets = (body is int) ? body : int.tryParse(body.toString()) ?? 0;
        setState(() { _totalTickets = totalTickets; });
        await prefs.setInt('cached_total_tickets', totalTickets);
      }
    } catch (e) {
      print('‚ùå [DEBUG] Error fetching tickets: $e');
    }
  }

  Future<void> _checkSubscriptions() async {
    try {
      setState(() {
        _isCheckingSubscriptions = true;
      });

      final userId = TelegramWebAppService.getUserId();
      if (userId == null) {
        print('‚ùå [DEBUG] User ID is null - cannot check subscriptions');
        return;
      }

      print('üîç [DEBUG] Checking subscriptions for user ID: $userId via API');

      final response = await http.post(
        Uri.parse('${ApiConfig.ratingApiBaseUrl}/api/check-subscriptions'),
        headers: ApiConfig.ratingApiHeaders,
        body: jsonEncode({'telegram_id': int.tryParse(userId) ?? userId}),
      );

      if (response.statusCode == 200) {
        final data = jsonDecode(response.body ?? '{}');
        final bool success = data['success'] == true;
        final bool isAll = data['is_subscribed_to_all'] == true;
        final bool ticketAwarded = data['ticket_awarded'] == true;
        final int subscriptionTickets = data['subscription_tickets'] is int ? data['subscription_tickets'] : 0;
        final int totalTickets = data['total_tickets'] is int ? data['total_tickets'] : 0;

        if (!success) {
          TelegramWebAppService.showAlert('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–æ–∫');
        }

          if (isAll) {
          await _fetchUserTickets();
          await _fetchGiveawayStatus();
          setState(() {
            folderCounter = '1/1';
            folderCounterColor = Colors.green;
          });
            // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ü–≤–µ—Ç –∫ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–º—É —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
            Future.delayed(const Duration(seconds: 5), () {
              if (mounted) {
                setState(() {
                  folderCounterColor = Colors.white.withOpacity(0.7);
                });
              }
            });
          if (ticketAwarded) {
            TelegramWebAppService.showAlert('‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞! +1 –±–∏–ª–µ—Ç –Ω–∞—á–∏—Å–ª–µ–Ω');
          } else {
            TelegramWebAppService.showAlert('‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞! –ë–∏–ª–µ—Ç —É–∂–µ –Ω–∞—á–∏—Å–ª—è–ª—Å—è —Ä–∞–Ω–µ–µ');
          }
        } else {
          setState(() {
            folderCounter = '0/1';
            folderCounterColor = Colors.red;
          });
          TelegramWebAppService.showAlert('‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø–æ–¥–ø–∏—Å–æ–∫! –ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –≤—Å–µ –∫–∞–Ω–∞–ª—ã –∏–∑ –ø–∞–ø–∫–∏');
            // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ü–≤–µ—Ç –∫ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–º—É —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
            Future.delayed(const Duration(seconds: 5), () {
              if (mounted) {
                setState(() {
                  folderCounterColor = Colors.white.withOpacity(0.7);
                });
              }
            });
        }
      } else {
        print('‚ùå [DEBUG] Failed API check subscriptions: ${response.statusCode}');
        TelegramWebAppService.showAlert('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏');
      }
    } catch (e) {
      print('‚ùå [DEBUG] Error checking subscriptions: $e');
      TelegramWebAppService.showAlert('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏');
    } finally {
      setState(() {
        _isCheckingSubscriptions = false;
      });
    }
  }

  Future<void> _fetchGiveawayStatus() async {
    try {
      final userId = TelegramWebAppService.getUserId();
      if (userId == null) return;
      final response = await http.get(Uri.parse('${ApiConfig.apiBaseUrl}/giveaway_status?user_id=eq.$userId'));
      if (response.statusCode == 200) {
        final data = jsonDecode(response.body ?? '[]');
        if (data is List && data.isNotEmpty) {
          final status = data[0];
          final isInFolder = status['is_in_folder'] == true || status['is_in_folder'] == 1;
          final invitedFriends = (status['invited_friends'] ?? 0) as int;
          
          // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥—Ä—É–∑–µ–π –º–∞–∫—Å–∏–º—É–º 10
          final limitedInvitedFriends = invitedFriends > 10 ? 10 : invitedFriends;
          
          setState(() {
            // –ó–∞–¥–∞–Ω–∏–µ 1: –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –ø–∞–ø–∫—É
            folderCounter = isInFolder ? '1/1' : '0/1';
            folderCounterColor = isInFolder ? Colors.green : Colors.white.withOpacity(0.7);
            
            // –ó–∞–¥–∞–Ω–∏–µ 2: –ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –¥—Ä—É–∑–µ–π (x/10)
            friendsCounter = '$limitedInvitedFriends/10';
            friendsCounterColor = limitedInvitedFriends > 0 ? Colors.green : Colors.white.withOpacity(0.7);
            
            _invitedFriends = limitedInvitedFriends;
            _giveawayTickets = (isInFolder ? 1 : 0) + limitedInvitedFriends;
            _totalEarnedTickets = _giveawayTickets; // –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –±–∏–ª–µ—Ç–æ–≤
          });
        }
      }
    } catch (e) {
      print('‚ùå [DEBUG] Error fetching giveaway status: $e');
    }
  }

  @override
  void dispose() {
    _timer.cancel();
    super.dispose();
  }

  Future<void> _loadSavedState() async {
    try {
      final prefs = await SharedPreferences.getInstance();
      setState(() {
        _task1ButtonPressed = prefs.getBool('task1_button_pressed') ?? false;
        _task2ButtonPressed = prefs.getBool('task2_button_pressed') ?? false;
        _canGoToApp = prefs.getBool('can_go_to_app') ?? false;
      });
    } catch (e) {
      print('Error loading saved state: $e');
    }
  }

  Future<void> _saveTask1ButtonPressed() async {
    try {
      final prefs = await SharedPreferences.getInstance();
      await prefs.setBool('task1_button_pressed', true);
      setState(() {
        _task1ButtonPressed = true;
      });
    } catch (e) {
      print('Error saving task1 button state: $e');
    }
  }

  Future<void> _saveTask2ButtonPressed() async {
    try {
      final prefs = await SharedPreferences.getInstance();
      await prefs.setBool('task2_button_pressed', true);
      setState(() {
        _task2ButtonPressed = true;
      });
    } catch (e) {
      print('Error saving task2 button state: $e');
    }
  }

  Future<void> _saveCanGoToApp() async {
    try {
      final prefs = await SharedPreferences.getInstance();
      await prefs.setBool('can_go_to_app', true);
      setState(() {
        _canGoToApp = true;
      });
    } catch (e) {
      print('Error saving canGoToApp state: $e');
    }
  }

  String _formatDuration(Duration d) {
    String twoDigits(int n) => n.toString().padLeft(2, '0');
    return "${d.inHours}:${twoDigits(d.inMinutes.remainder(60))}:${twoDigits(d.inSeconds.remainder(60))}";
  }

  Future<void> _logTaskCompletion(String userId, String taskName, int taskNumber) async {
    try {
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–µ—Ä–≤–µ—Ä –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
      final response = await http.post(
        Uri.parse('${ApiConfig.apiBaseUrl}/log-task-completion'),
        headers: {'Content-Type': 'application/json'},
        body: jsonEncode({
          'user_id': userId,
          'task_name': taskName,
          'task_number': taskNumber,
        }),
      );

      if (response.statusCode != 200) {
        print('Error logging task completion: ${response.statusCode}');
      }
    } catch (e) {
      print('Error logging task completion: $e');
    }
  }

  Future<void> _logFolderSubscription(String userId) async {
    try {
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–µ—Ä–≤–µ—Ä –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –ø–∞–ø–∫—É
      final response = await http.post(
        Uri.parse('${ApiConfig.apiBaseUrl}/log-folder-subscription'),
        headers: {'Content-Type': 'application/json'},
        body: jsonEncode({
          'user_id': userId,
        }),
      );

      if (response.statusCode != 200) {
        print('Error logging folder subscription: ${response.statusCode}');
      }
    } catch (e) {
      print('Error logging folder subscription: $e');
    }
  }

  Future<void> _openContactsForInvite() async {
    try {
      final userId = TelegramWebAppService.getUserId();
      if (userId == null) {
        TelegramWebAppService.showAlert('–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
        return;
      }

      // –ü–æ–ª—É—á–∞–µ–º referral_code —Å —Å–µ—Ä–≤–µ—Ä–∞ (—Å–æ–∑–¥–∞—Å—Ç—Å—è, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç)
      String? referralCode;
      final resp = await http.post(
        Uri.parse('${ApiConfig.ratingApiBaseUrl}/api/referral-code'),
        headers: ApiConfig.ratingApiHeaders,
        body: jsonEncode({'telegram_id': int.tryParse(userId) ?? userId}),
      );
      if (resp.statusCode == 200) {
        final body = jsonDecode(resp.body);
        referralCode = body['referral_code'];
      }
      if (referralCode == null || referralCode.isEmpty) {
        TelegramWebAppService.showAlert('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–∑–∂–µ.');
        return;
      }

      final shareLink = 'https://t.me/GTM_ROBOT?start=$referralCode';

      final inviteMessage = '''üñ§ –ü—Ä–∏–≤–µ—Ç! –ù–∞—à—ë–ª –∫—Ä—É—Ç—É—é –ø–ª–∞—Ç—Ñ–æ—Ä–º—É ‚Äî GOTHAM'S TOP MODEL! ‚ú®

üî• –ß—Ç–æ —Ç—É—Ç –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç:
‚Ä¢ ü§ñ AI-–ø–æ–∏—Å–∫ –º–∞—Å—Ç–µ—Ä–æ–≤ –ø–æ —Ñ–æ—Ç–æ
‚Ä¢ üñ§ –ó–∞–ø–∏—Å—å –∫ —Ç–æ–ø –∞—Ä—Ç–∏—Å—Ç–∞–º: —Ç–∞—Ç—É, –ø–∏—Ä—Å–∏–Ω–≥, –æ–∫—Ä–∞—à–∏–≤–∞–Ω–∏–µ
‚Ä¢ üí∏ –†–æ–∑—ã–≥—Ä—ã—à–∏ –Ω–∞ >130,000‚ÇΩ
‚Ä¢ üíÑ –°–∫–∏–¥–∫–∏ 8% –Ω–∞ –±—å—é—Ç–∏-—É—Å–ª—É–≥–∏
‚Ä¢ üéÄ –ü–æ–¥–∞—Ä–æ—á–Ω—ã–µ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã
‚Ä¢ üó®Ô∏è –ë–æ–ª—å—à–æ–π —á–∞—Ç –º–µ–∂–¥—É –º–∞—Å—Ç–µ—Ä–∞–º–∏ –∏ –∫–ª–∏–µ–Ω—Ç–∞–º–∏

üå™Ô∏è –ê –≤–ø–µ—Ä–µ–¥–∏:
‚Ä¢ üßÉ –î—Ä–æ–ø—ã —Å –ª–∏–º–∏—Ç–∫–∞–º–∏ –∏ —Å—Ç–∏–ª–µ–º
‚Ä¢ üñ§ –ú–µ–º—ã –∏ –∫—Ä—É—Ç—ã–µ –∫–æ–ª–ª–∞–±—ã
‚Ä¢ ü•Ä –î–≤–∏–∂, –∏–Ω—Ç—Ä–∏–≥–∏ –∏ —Å—é—Ä–ø—Ä–∏–∑—ã

üéÅ –•–æ—á–µ—à—å –±–æ–Ω—É—Å—ã? –õ–æ–≤–∏:
$shareLink

üíó –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Å—è ‚Äî –∏ –±—É–¥—å –≤ –∏–≥—Ä–µ üé≤
#GTM #GothamsTopModel #Giveaway''';

      final telegramUrl = 'https://t.me/share/url?url=${Uri.encodeComponent(shareLink)}&text=${Uri.encodeComponent(inviteMessage)}';
      if (kIsWeb) {
        html.window.open(telegramUrl, '_blank');
      } else {
        await launchUrl(Uri.parse(telegramUrl), mode: LaunchMode.externalApplication);
      }
    } catch (e) {
      print('‚ùå Error opening contacts for invite: $e');
      TelegramWebAppService.showAlert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ —Å–ø–∏—Å–∫–∞ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤');
    }
  }

  void _showPrizesDialog() {
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        backgroundColor: Colors.black87,
        title: const Text(
          'üéÅ –ü–æ–¥–∞—Ä–∫–∏ –≥–∏–≤–µ–≤–µ—è',
          style: TextStyle(
            color: Colors.white,
            fontFamily: 'NauryzKeds',
            fontSize: 24,
          ),
          textAlign: TextAlign.center,
        ),
        content: SingleChildScrollView(
          child: Column(
            mainAxisSize: MainAxisSize.min,
            children: [
              // –ü—Ä–∏–∑—ã
              _PrizeCard(
                title: '–ó–æ–ª–æ—Ç–æ–µ —è–±–ª–æ–∫–æ',
                descriptionWidget: _buildRichText([
                  TextSpan(text: '–ë—É–¥–µ—Ç '),
                  TextSpan(text: '–æ–¥–Ω–æ', style: TextStyle(color: Colors.white, fontWeight: FontWeight.bold)),
                  TextSpan(text: ' –ø—Ä–∏–∑–æ–≤–æ–µ –º–µ—Å—Ç–æ ‚Äî —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –Ω–∞ –ø–æ–∫—É–ø–∫—É –≤ '),
                  TextSpan(text: '–ó–æ–ª–æ—Ç–æ–º –Ø–±–ª–æ–∫–µ', style: TextStyle(color: Colors.white, fontWeight: FontWeight.bold)),
                  TextSpan(text: ' –Ω–∞ —Å—É–º–º—É 20000 —Ä—É–±–ª–µ–π'),
                ]),
                value: '20,000‚ÇΩ',
                icon: Icons.emoji_events,
                color: Colors.amber,
              ),
              const SizedBox(height: 16),
              _PrizeCard(
                title: '–ë—å—é—Ç–∏-—É—Å–ª—É–≥–∏',
                descriptionWidget: _buildRichText([
                  TextSpan(text: '4 –ø–æ–±–µ–¥–∏—Ç–µ–ª—è,', style: TextStyle(color: Colors.white, fontWeight: FontWeight.bold)),
                  TextSpan(text: ' –∫–∞–∂–¥—ã–π –∏–∑ –∫–æ—Ç–æ—Ä—ã—Ö –ø–æ –æ—á–µ—Ä–µ–¥–∏ –º–æ–∂–µ—Ç –≤—ã–±—Ä–∞—Ç—å:\n\n'),
                  TextSpan(text: '–¢–∞—Ç—É–∏—Ä–æ–≤–∫—É –¥–æ 15 —Å–º', style: TextStyle(color: Colors.white, fontWeight: FontWeight.bold)),
                  TextSpan(text: ' —É: '),
                  ..._tgLinksInline(['@naidenka_tatto0', '@emi3mo', '@ufantasiesss']),
                  TextSpan(text: '\n'),
                  TextSpan(text: '–¢–∞—Ç—É–∏—Ä–æ–≤–∫—É –¥–æ 10 —Å–º', style: TextStyle(color: Colors.white, fontWeight: FontWeight.bold)),
                  TextSpan(text: ' —É: '),
                  ..._tgLinksInline(['@g9r1a', '@murderd0lll']),
                  TextSpan(text: '\n'),
                  TextSpan(text: '–°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –Ω–∞ –ø–∏—Ä—Å–∏–Ω–≥', style: TextStyle(color: Colors.white, fontWeight: FontWeight.bold)),
                  TextSpan(text: ' —É: '),
                  ..._tgLinksInline(['@bloodivampin']),
                  TextSpan(text: '\n'),
                  TextSpan(text: '–°—Ç—Ä–∏–∂–∫—É ', style: TextStyle(color: Colors.white, fontWeight: FontWeight.bold)),
                  TextSpan(text: '–∏–ª–∏ ', style: TextStyle(color: Colors.white)),
                  TextSpan(text: '–∞–≤—Ç–æ—Ä—Å–∫–∏–π –ø—Ä–æ–µ–∫—Ç', style: TextStyle(color: Colors.white, fontWeight: FontWeight.bold)),
                  TextSpan(text: ' —É: '),
                  ..._tgLinksInline(['@punk2_n0t_d34d']),
                  TextSpan(text: '\n'),
                  TextSpan(text: '50% —Å–∫–∏–¥–∫—É', style: TextStyle(color: Colors.white, fontWeight: FontWeight.bold)),
                  TextSpan(text: ' –Ω–∞ –ª—é–±–æ–π —Ç–∞—Ç—É-–ø—Ä–æ–µ–∫—Ç —É: '),
                  ..._tgLinksInline(['@chchndra_tattoo']),
                ]),
                value: '100,000‚ÇΩ',
                icon: Icons.spa,
                color: Colors.pink,
              ),
              const SizedBox(height: 16),
              _PrizeCard(
                title: 'Telegram Premium (3 –º–µ—Å)',
                descriptionWidget: _buildRichText([
                  TextSpan(text: ''),
                  TextSpan(text: '–•3', style: TextStyle(color: Colors.white, fontWeight: FontWeight.bold)),
                  TextSpan(text: ' –ø–æ–¥–ø–∏—Å–∫–∏ Telegram Premium –Ω–∞ 3 –º–µ—Å—è—Ü–∞, –¥–ª—è —Ç–µ—Ö –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –º–æ–≥—É—Ç –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±—å—é—Ç–∏-—É—Å–ª—É–≥–∞–º–∏ –∞—Ä—Ç–∏—Å—Ç–æ–≤.'),
                ]),
                value: '3,500‚ÇΩ',
                icon: Icons.telegram,
                color: Colors.blue,
              ),
              const SizedBox(height: 16),
              // –ú–µ—Ä—á GTM x CRYSQUAD
              _PrizeCard(
                title: 'GTM x CRYSQUAD',
                descriptionWidget: _buildRichText([
                  TextSpan(text: '–≠–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–π –º–µ—Ä—á –æ—Ç '),
                  TextSpan(text: 'Gotham\'s Top Model', style: TextStyle(color: Colors.white, fontWeight: FontWeight.bold)),
                  TextSpan(text: ' –≤ –∫–æ–ª–ª–∞–±–æ—Ä–∞—Ü–∏–∏ —Å '),
                  TextSpan(text: 'CRYSQUAD', style: TextStyle(color: Colors.white, fontWeight: FontWeight.bold)),
                  TextSpan(text: '. –û–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–∞—è —Å–µ—Ä–∏—è.'),
                  TextSpan(text: '\n\n–ï—Å–ª–∏ –Ω–µ –ø–æ–ª–∞–≥–∞–µ—à—å—Å—è –Ω–∞ —É–¥–∞—á—É, –∂–º–∏ –∫–Ω–æ–ø–∫—É BUY'),
                ]),
                value: '3,799‚ÇΩ',
                icon: Icons.shopping_bag,
                color: Colors.white,
                showViewButton: true,
                onViewPressed: () {
                  Navigator.of(context).pop();
                  _showTshirtGallery();
                },
                showBuyButton: true,
                onBuyPressed: () {
                  Navigator.of(context).pop();
                  _openMerchLink();
                },
              ),
              const SizedBox(height: 16),
              _PrizeCard(
                title: '–°–∫–∏–¥–∫–∏ –≤—Å–µ–º',
                descriptionWidget: _buildRichText([
                  TextSpan(text: ''),
                  TextSpan(text: '8% –≤—Å–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º', style: TextStyle(color: Colors.white, fontWeight: FontWeight.bold)),
                  TextSpan(text: ', –ø–æ–ª—É—á–∏–≤—à–∏–º '),
                  TextSpan(text: '—Ö–æ—Ç—è –±—ã 1 –±–∏–ª–µ—Ç', style: TextStyle(color: Colors.white, fontWeight: FontWeight.bold)),
                  TextSpan(text: ' —Ä–æ–∑—ã–≥—Ä—ã—à–∞ –Ω–∞ —É—Å–ª—É–≥–∏ –≤—Å–µ—Ö —Ä–µ–∑–∏–¥–µ–Ω—Ç–æ–≤ '),
                  TextSpan(text: 'Gotham\'s Top Model', style: TextStyle(color: Colors.white, fontWeight: FontWeight.bold)),
                ]),
                value: '8%',
                icon: Icons.percent,
                color: Colors.green,
              ),
              const SizedBox(height: 20),
              // –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø—Ä–∏–∑–æ–≤ –ø–æ —Ü–µ–Ω—Ç—Ä—É —Å–Ω–∏–∑—É
              Container(
                margin: const EdgeInsets.only(bottom: 10),
                padding: const EdgeInsets.all(16),
                decoration: BoxDecoration(
                  color: const Color(0xFFFF6EC7).withOpacity(0.2),
                  border: Border.all(color: const Color(0xFFFF6EC7)),
                  borderRadius: BorderRadius.zero, // –ö–≤–∞–¥—Ä–∞—Ç–Ω–∞—è —Ä–∞–º–∫–∞
                ),
                child: const Text(
                  'üèÜ –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø—Ä–∏–∑–æ–≤: > 130,000‚ÇΩ',
                  style: TextStyle(
                    color: Colors.white,
                    fontFamily: 'NauryzKeds',
                    fontSize: 18,
                    fontWeight: FontWeight.bold,
                  ),
                  textAlign: TextAlign.center,
                ),
              ),
              // –£—Å–ª–æ–≤–∏—è –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –±–∏–ª–µ—Ç–æ–≤
              Container(
                margin: const EdgeInsets.only(top: 0),
                padding: const EdgeInsets.all(14),
                decoration: BoxDecoration(
                  color: Colors.white.withOpacity(0.08),
                  border: Border.all(color: Colors.white24),
                  borderRadius: BorderRadius.zero, // –ö–≤–∞–¥—Ä–∞—Ç–Ω–∞—è —Ä–∞–º–∫–∞
                ),
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    Row(
                      children: [
                        const Icon(Icons.confirmation_num, color: Color(0xFFFF6EC7), size: 20),
                        const SizedBox(width: 8),
                        const Text(
                          '–ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å –±–∏–ª–µ—Ç—ã:',
                          style: TextStyle(
                            color: Colors.white,
                            fontFamily: 'NauryzKeds',
                            fontSize: 16,
                            fontWeight: FontWeight.bold,
                          ),
                        ),
                      ],
                    ),
                    const SizedBox(height: 10),
                    Row(
                      crossAxisAlignment: CrossAxisAlignment.start,
                      children: [
                        const Text('‚Ä¢ ', style: TextStyle(color: Colors.white, fontSize: 16)),
                        Expanded(
                          child: RichText(
                            text: const TextSpan(
                              style: TextStyle(color: Colors.white, fontFamily: 'OpenSans', fontSize: 15),
                              children: [
                                TextSpan(text: '+1 –±–∏–ª–µ—Ç', style: TextStyle(fontWeight: FontWeight.bold, color: Colors.white)),
                                TextSpan(text: ' ‚Äî –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ Telegram-–ø–∞–ø–∫—É (–Ω–µ –æ—Ç–ø–∏—Å—ã–≤–∞—Ç—å—Å—è –¥–æ –∫–æ–Ω—Ü–∞ —Ä–æ–∑—ã–≥—Ä—ã—à–∞, —É—Å–ª–æ–≤–∏—è –ø—Ä–æ–≤–µ—Ä—è—é—Ç—Å—è)'),
                              ],
                            ),
                          ),
                        ),
                      ],
                    ),
                    const SizedBox(height: 4),
                    Row(
                      crossAxisAlignment: CrossAxisAlignment.start,
                      children: [
                        const Text('‚Ä¢ ', style: TextStyle(color: Colors.white, fontSize: 16)),
                        Expanded(
                          child: RichText(
                            text: const TextSpan(
                              style: TextStyle(color: Colors.white, fontFamily: 'OpenSans', fontSize: 15),
                              children: [
                                TextSpan(text: '+1 –±–∏–ª–µ—Ç', style: TextStyle(fontWeight: FontWeight.bold, color: Colors.white)),
                                TextSpan(text: ' ‚Äî –∑–∞ –∫–∞–∂–¥–æ–≥–æ –¥—Ä—É–≥–∞, –∫–æ—Ç–æ—Ä—ã–π —Å—Ç–∞—Ä—Ç—É–µ—Ç –±–æ—Ç–∞ –ø–æ –≤–∞—à–µ–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ'),
                              ],
                            ),
                          ),
                        ),
                      ],
                    ),
                  ],
                ),
              ),
            ],
          ),
        ),
        actions: [
          TextButton(
            onPressed: () => Navigator.of(context).pop(),
            child: const Text(
              '–ó–∞–∫—Ä—ã—Ç—å',
              style: TextStyle(
                color: Color(0xFFFF6EC7),
                fontFamily: 'NauryzKeds',
                fontSize: 16,
              ),
            ),
          ),
        ],
      ),
    );
  }

  void _showTshirtGallery() {
    showDialog(
      context: context,
      builder: (context) => Dialog(
        backgroundColor: Colors.black87,
        child: Container(
          width: MediaQuery.of(context).size.width * 0.9,
          height: MediaQuery.of(context).size.height * 0.8,
          padding: const EdgeInsets.all(16),
          child: Column(
            children: [
              Row(
                mainAxisAlignment: MainAxisAlignment.spaceBetween,
                children: [
                  const Text(
                    'GTM x CRYSQUAD',
                    style: TextStyle(
                      color: Colors.white,
                      fontFamily: 'NauryzKeds',
                      fontSize: 20,
                      fontWeight: FontWeight.bold,
                    ),
                  ),
                  IconButton(
                    onPressed: () => Navigator.of(context).pop(),
                    icon: const Icon(Icons.close, color: Colors.white),
                  ),
                ],
              ),
              const SizedBox(height: 16),
              Expanded(
                child: PageView(
                  children: [
                    Image.network(
                      'https://rxmtovqxjsvogyywyrha.supabase.co/storage/v1/object/public/gtm-assets-public/gtm-mer4/gtm_tshirt.jpg',
                      fit: BoxFit.contain,
                      errorBuilder: (context, error, stackTrace) {
                        return Image.asset(
                          'assets/GTM_products/gtm_tshirt.jpg',
                          fit: BoxFit.contain,
                        );
                      },
                    ),
                    // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –±–æ–ª—å—à–µ —Ñ–æ—Ç–æ —Ç–∏—à–∫–∏
                  ],
                ),
              ),
              const SizedBox(height: 16),
              ElevatedButton(
                onPressed: () {
                  Navigator.of(context).pop();
                  _openMerchLink();
                },
                style: ElevatedButton.styleFrom(
                  backgroundColor: Colors.white,
                  foregroundColor: Colors.black,
                  padding: const EdgeInsets.symmetric(horizontal: 24, vertical: 12),
                  shape: RoundedRectangleBorder(
                    borderRadius: BorderRadius.zero,
                  ),
                ),
                child: const Text(
                  'BUY',
                  style: TextStyle(
                    fontFamily: 'NauryzKeds',
                    fontWeight: FontWeight.bold,
                    fontSize: 16,
                  ),
                ),
              ),
            ],
          ),
        ),
      ),
    );
  }

  void _openMerchLink() async {
    final userId = TelegramWebAppService.getUserId();
    final message = '–ô–æ! üíÄ —Ö–æ—á—É –º–µ—Ä—á!\n–í–æ—Ç –º–æ—è —Å–∫–∏–¥–∫–∞ early bird 10% ‚Äì MER410-$userId\nüé± –ú–æ–∂–Ω–æ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏–Ω—Ñ—É –∏ –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –ø–æ —Ç–æ–≤–∞—Ä–∞–º?\nüñ§';
    
    // –û—Ç–∫—Ä—ã–≤–∞–µ–º Telegram —Å –ø—Ä–µ–¥–∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º –≤ –ª–∏—á–∫—É GTM_ADM
    final telegramUrl = 'https://t.me/GTM_ADM?text=${Uri.encodeComponent(message)}';
    
    if (await canLaunchUrl(Uri.parse(telegramUrl))) {
      await launchUrl(Uri.parse(telegramUrl), mode: LaunchMode.externalApplication);
    }
  }

  void _openTelegramFolder() async {
    try {
      if (kIsWeb) {
        html.window.open(_telegramFolderUrl, '_blank');
      } else {
        await launchUrl(Uri.parse(_telegramFolderUrl));
      }
    } catch (e) {
      print('‚ùå Error opening Telegram folder: $e');
    }
  }

  void _openInviteFriends() async {
    try {
      final userId = TelegramWebAppService.getUserId();
      if (userId == null) {
        TelegramWebAppService.showAlert('–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
        return;
      }
      // –ü–æ–ª—É—á–∞–µ–º/—Å–æ–∑–¥–∞—ë–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥ —Å—Ç—Ä–æ–≥–æ —á–µ—Ä–µ–∑ API
      final code = await ApiSvc.ApiService.getOrCreateReferralCode(userId);
      if (code == null || code.isEmpty) {
        TelegramWebAppService.showAlert('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–∑–∂–µ.');
        return;
      }
      final referralLink = 'https://t.me/GTM_ROBOT?start=' + code;
      
      final message = '''üñ§ –ü—Ä–∏–≤–µ—Ç! –ù–∞—à—ë–ª –∫—Ä—É—Ç—É—é –ø–ª–∞—Ç—Ñ–æ—Ä–º—É ‚Äî GOTHAM'S TOP MODEL! ‚ú®

üî• –ß—Ç–æ —Ç—É—Ç –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç:
‚Ä¢ ü§ñ AI-–ø–æ–∏—Å–∫ –º–∞—Å—Ç–µ—Ä–æ–≤ –ø–æ —Ñ–æ—Ç–æ
‚Ä¢ üñ§ –ó–∞–ø–∏—Å—å –∫ —Ç–æ–ø –∞—Ä—Ç–∏—Å—Ç–∞–º: —Ç–∞—Ç—É, –ø–∏—Ä—Å–∏–Ω–≥, –æ–∫—Ä–∞—à–∏–≤–∞–Ω–∏–µ
‚Ä¢ üí∏ –†–æ–∑—ã–≥—Ä—ã—à–∏ –Ω–∞ >130,000‚ÇΩ
‚Ä¢ üíÑ –°–∫–∏–¥–∫–∏ 8% –Ω–∞ –±—å—é—Ç–∏-—É—Å–ª—É–≥–∏
‚Ä¢ üéÄ –ü–æ–¥–∞—Ä–æ—á–Ω—ã–µ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã
‚Ä¢ üó®Ô∏è –ë–æ–ª—å—à–æ–π —á–∞—Ç –º–µ–∂–¥—É –º–∞—Å—Ç–µ—Ä–∞–º–∏ –∏ –∫–ª–∏–µ–Ω—Ç–∞–º–∏

üå™Ô∏è –ê –≤–ø–µ—Ä–µ–¥–∏:
‚Ä¢ üßÉ –î—Ä–æ–ø—ã —Å –ª–∏–º–∏—Ç–∫–∞–º–∏ –∏ —Å—Ç–∏–ª–µ–º
‚Ä¢ üñ§ –ú–µ–º—ã –∏ –∫—Ä—É—Ç—ã–µ –∫–æ–ª–ª–∞–±—ã
‚Ä¢ ü•Ä –î–≤–∏–∂, –∏–Ω—Ç—Ä–∏–≥–∏ –∏ —Å—é—Ä–ø—Ä–∏–∑—ã

üéÅ –•–æ—á–µ—à—å –±–æ–Ω—É—Å—ã? –õ–æ–≤–∏:
$referralLink

üíó –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Å—è ‚Äî –∏ –±—É–¥—å –≤ –∏–≥—Ä–µ üé≤
#GTM #GothamsTopModel #Giveaway''';
      
      if (kIsWeb) {
        html.window.open('https://t.me/share/url?url=${Uri.encodeComponent(referralLink)}&text=${Uri.encodeComponent(message)}', '_blank');
      } else {
        await launchUrl(Uri.parse('https://t.me/share/url?url=${Uri.encodeComponent(referralLink)}&text=${Uri.encodeComponent(message)}'));
      }
    } catch (e) {
      print('‚ùå Error opening invite friends: $e');
    }
  }

  

  List<TextSpan> _tgLinksInline(List<String> handles) {
    List<TextSpan> spans = [];
    for (int i = 0; i < handles.length; i++) {
      spans.add(TextSpan(
        text: handles[i],
        style: const TextStyle(
          color: Color(0xFFFF6EC7),
          fontWeight: FontWeight.bold,
          decoration: TextDecoration.underline,
        ),
        recognizer: TapGestureRecognizer()
          ..onTap = () async {
            final username = handles[i].replaceFirst('@', '');
            final telegramUrl = 'https://t.me/$username';
            try {
              if (kIsWeb) {
                html.window.open(telegramUrl, '_blank');
              } else {
                await launchUrl(Uri.parse(telegramUrl), mode: LaunchMode.externalApplication);
              }
            } catch (e) {
              print('‚ùå Error opening Telegram profile: $e');
            }
          },
      ));
      if (i < handles.length - 1) {
        spans.add(const TextSpan(text: ', '));
      }
    }
    return spans;
  }

  RichText _buildRichText(List<TextSpan> spans) {
    return RichText(
      text: TextSpan(
        style: const TextStyle(
          color: Colors.white70,
          fontFamily: 'OpenSans',
          fontSize: 14,
        ),
        children: spans,
      ),
    );
  }

  @override
  Widget build(BuildContext context) {
    // –ö–Ω–æ–ø–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ –µ—Å–ª–∏:
    // 1. –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å—Ç—å —Ö–æ—Ç—è –±—ã 1 –±–∏–ª–µ—Ç –ò–õ–ò
    // 2. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª –Ω–∞ –∫–Ω–æ–ø–∫—É "–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –ø–∞–ø–∫—É" –ò–õ–ò
    // 3. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª –Ω–∞ –∫–Ω–æ–ø–∫—É "–ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–∑–µ–π"
    final bool isGoToAppButtonEnabled = _giveawayTickets > 0 || _task1ButtonPressed || _task2ButtonPressed;
    // –ß–µ–∫-–ª–∏—Å—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
    final int task1Progress = _tickets >= 1 ? 1 : 0;
    final int task2Progress = _invitedFriends;
    final int task2Max = task2Progress < 10 ? task2Progress + 1 : 10;
    final int totalTickets = task1Progress + task2Progress;

    return Scaffold(
      backgroundColor: Colors.black,
      body: Stack(
        children: [
          Positioned.fill(
            child: Stack(
              children: [
                Positioned.fill(
                  child: Image.asset(
                    'assets/giveaway_back_banner.png',
                    width: double.infinity,
                    height: double.infinity,
                    fit: BoxFit.cover,
                  ),
                ),
                Positioned.fill(
                  child: LayoutBuilder(
                    builder: (context, constraints) {
                      final height = constraints.maxHeight;
                      return Transform.translate(
                        offset: Offset(0, -height * 0.06),
                        child: Transform.scale(
                          scale: 1.13,
                          alignment: Alignment.center,
                          child: Image.asset(
                            'assets/giveaway_banner.png',
                            fit: BoxFit.contain,
                            alignment: Alignment.center,
                          ),
                        ),
                      );
                    },
                  ),
                ),
                Container(
                  color: Colors.black.withOpacity(0.25),
                ),
              ],
            ),
          ),
          SafeArea(
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.stretch,
              children: [
                SizedBox(height: MediaQuery.of(context).size.height * 0.05 + 45),
                Container(
                  alignment: Alignment.center,
                  child: FittedBox(
                    fit: BoxFit.scaleDown,
                    child: Text(
                      'GIVEAWAY',
                      style: TextStyle(
                        color: Colors.white,
                        fontSize: 120,
                        fontWeight: FontWeight.bold,
                        fontFamily: 'NauryzKeds',
                        letterSpacing: 2,
                        height: 1,
                      ),
                    ),
                  ),
                ),
                const SizedBox(height: 8),
                Container(
                  alignment: Alignment.center,
                  child: FittedBox(
                    fit: BoxFit.scaleDown,
                    child: Text(
                      _formatDuration(_timeLeft),
                      style: const TextStyle(
                        color: Colors.white,
                        fontSize: 220,
                        fontWeight: FontWeight.w700,
                        letterSpacing: -2,
                        fontFamily: 'NauryzKeds',
                        height: 0.9,
                      ),
                    ),
                  ),
                ),
                const SizedBox(height: 8),
                const Spacer(),
                Column(
                  mainAxisSize: MainAxisSize.min,
                  children: [
                    Padding(
                      padding: const EdgeInsets.symmetric(horizontal: 16, vertical: 3),
                      child: GestureDetector(
                        onTap: _showPrizesDialog,
                        child: Container(
                          width: double.infinity,
                          padding: const EdgeInsets.symmetric(vertical: 16, horizontal: 20),
                          decoration: BoxDecoration(
                            color: const Color(0xFFFF6EC7).withOpacity(0.2),
                            border: Border.all(color: const Color(0xFFFF6EC7), width: 2),
                          ),
                          child: Row(
                            mainAxisAlignment: MainAxisAlignment.center,
                            children: [
                              const Icon(Icons.card_giftcard, color: Colors.white, size: 24),
                              const SizedBox(width: 12),
                              const Text(
                                '–ü–æ–¥–∞—Ä–∫–∏',
                                style: TextStyle(
                                  color: Colors.white,
                                  fontSize: 20,
                                  fontWeight: FontWeight.bold,
                                  fontFamily: 'NauryzKeds',
                                ),
                              ),
                              const SizedBox(width: 18),
                              const Icon(Icons.confirmation_num, color: Color(0xFFFF6EC7), size: 22),
                              const SizedBox(width: 4),
                              Text(
                                '$_giveawayTickets/$_totalTickets',
                                style: const TextStyle(
                                  color: Color(0xFFFF6EC7),
                                  fontFamily: 'NauryzKeds',
                                  fontSize: 18,
                                  fontWeight: FontWeight.bold,
                                ),
                              ),
                            ],
                          ),
                        ),
                      ),
                    ),
                    // –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞–Ω–∏–π –∏ –∫–Ω–æ–ø–∫–∞
                    Padding(
                      padding: const EdgeInsets.only(bottom: 8),
                      child: Column(
                        mainAxisSize: MainAxisSize.min,
                        children: [
                          _SubscribeFolderCard(
                            folderCounter: folderCounter,
                            folderCounterColor: folderCounterColor,
                            isChecking: _isCheckingSubscriptions,
                            onCheckTap: _isCheckingSubscriptions ? null : _checkSubscriptions,
                            onSubscribeTap: () async {
                              await _saveTask1ButtonPressed();
                              if (await canLaunchUrl(Uri.parse(_telegramFolderUrl))) {
                                await launchUrl(Uri.parse(_telegramFolderUrl), mode: LaunchMode.externalApplication);
                              } else {
                                TelegramWebAppService.showAlert('–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–µ—Ç—Å—è –æ—Ç–∫—Ä—ã—Ç—å —Å—Å—ã–ª–∫—É');
                              }
                              setState(() {
                                _task1Done = true;
                              });
                              try {
                                final userId = TelegramWebAppService.getUserId();
                                if (userId != null) {
                                  final response = await http.post(
                                    Uri.parse('${ApiConfig.apiBaseUrl}/check-subscription'),
                                    headers: {'Content-Type': 'application/json'},
                                    body: jsonEncode({
                                      'user_id': userId,
                                      'username': _username,
                                    }),
                                  );
                                  final data = jsonDecode(response.body ?? '{}');
                                  if (data['subscribed'] == true) {
                                    // –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –ø–∞–ø–∫—É —É–∂–µ –ª–æ–≥–∏—Ä—É–µ—Ç—Å—è —á–µ—Ä–µ–∑ API
                                    await _logTaskCompletion(userId, '–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ Telegram-–ø–∞–ø–∫—É', 1);
                                    await _fetchUserTickets();
                                  } else {
                                    TelegramWebAppService.showAlert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª!');
                                  }
                                }
                              } catch (e) {
                                print('Error checking subscription: $e');
                              }
                              await _fetchGiveawayStatus();
                            },
                          ),
                          _TaskTile(
                            title: '–ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–∑–µ–π',
                            subtitle: '–ó–∞ –∫–∞–∂–¥–æ–≥–æ –¥—Ä—É–≥–∞: +1 –±–∏–ª–µ—Ç',
                            icon: Icons.person_add_alt_1,
                            onTap: () async {
                              // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏
                              await _saveTask2ButtonPressed();
                              
                              // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
                              setState(() {
                                _task2Done = false;
                              });
                              
                              // –û—Ç–∫—Ä—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ —Å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–æ–π
                              await _openContactsForInvite();
                              
                              setState(() {
                                _task2Done = true;
                              });
                              
                              // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
                              TelegramWebAppService.showAlert('–û—Ç–ª–∏—á–Ω–æ! –°–ø–∏—Å–æ–∫ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –æ—Ç–∫—Ä—ã—Ç');
                              
                              // –õ–æ–≥–∏—Ä—É–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è
                              try {
                                final userId = TelegramWebAppService.getUserId();
                                if (userId != null) {
                                  await _logTaskCompletion(userId, '–ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–∑–µ–π', 2);
                                }
                              } catch (e) {
                                print('Error logging task completion: $e');
                              }
                              
                              await _fetchGiveawayStatus(); // –æ–±–Ω–æ–≤–∏—Ç—å —Å—á–µ—Ç—á–∏–∫ –ø–æ—Å–ª–µ –¥–µ–π—Å—Ç–≤–∏—è
                            },
                            done: (int.tryParse(friendsCounter.split('/').first) ?? 0) > 0 || _task2ButtonPressed,
                            taskNumber: 2,
                            counter: friendsCounter,
                            counterColor: friendsCounterColor,
                            onCheckTap: null,
                            isChecking: false,
                          ),
                        ],
                      ),
                    ),
                    Padding(
                      padding: const EdgeInsets.symmetric(horizontal: 16, vertical: 4).copyWith(bottom: 22),
                      child: GradientButton(
                        text: '–ü–µ—Ä–µ–π—Ç–∏ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ',
                        onTap: () {
                          Navigator.of(context).pushReplacement(
                            PageRouteBuilder(
                              pageBuilder: (_, __, ___) => const RoleSelectionScreen(),
                              transitionsBuilder: (context, animation, secondaryAnimation, child) {
                                return FadeTransition(
                                  opacity: animation,
                                  child: child,
                                );
                              },
                              transitionDuration: const Duration(milliseconds: 350),
                            ),
                          );
                        },
                        enabled: isGoToAppButtonEnabled,
                      ),
                    ),
                  ],
                ),
              ],
            ),
          ),
        ],
      ),
    );
  }
}

class _SubscribeFolderCard extends StatelessWidget {
  final String folderCounter;
  final Color folderCounterColor;
  final bool isChecking;
  final VoidCallback? onCheckTap;
  final VoidCallback onSubscribeTap;

  const _SubscribeFolderCard({
    required this.folderCounter,
    required this.folderCounterColor,
    required this.isChecking,
    required this.onCheckTap,
    required this.onSubscribeTap,
  });

  @override
  Widget build(BuildContext context) {
    return Container(
      margin: const EdgeInsets.symmetric(horizontal: 16, vertical: 8),
      padding: const EdgeInsets.all(0),
      decoration: BoxDecoration(
        color: Colors.grey[900]!.withOpacity(0.7),
        borderRadius: BorderRadius.zero,
      ),
      child: InkWell(
        onTap: onSubscribeTap,
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.stretch,
          children: [
            Padding(
              padding: const EdgeInsets.symmetric(horizontal: 20, vertical: 16),
              child: Row(
                children: [
                  Container(
                    padding: const EdgeInsets.all(12),
                    decoration: BoxDecoration(
                      color: const Color(0xFFFF6EC7).withOpacity(0.2),
                      shape: BoxShape.circle,
                    ),
                    child: const Icon(
                      Icons.folder_special,
                      color: Color(0xFFFF6EC7),
                      size: 24,
                    ),
                  ),
                  const SizedBox(width: 16),
                  Expanded(
                    child: Column(
                      crossAxisAlignment: CrossAxisAlignment.start,
                      children: [
                        const Text(
                          '–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ Telegram-–ø–∞–ø–∫—É',
                          style: TextStyle(
                            color: Colors.white,
                            fontWeight: FontWeight.w600,
                            fontSize: 18,
                          ),
                        ),
                        const SizedBox(height: 4),
                        const Text(
                          '–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –ø–∞–ø–∫—É: +1 –±–∏–ª–µ—Ç',
                          style: TextStyle(
                            color: Colors.white70,
                            fontWeight: FontWeight.w400,
                            fontSize: 15,
                          ),
                        ),
                      ],
                    ),
                  ),
                  Column(
                    mainAxisSize: MainAxisSize.min,
                    crossAxisAlignment: CrossAxisAlignment.end,
                    children: [
                      Container(
                        width: 80,
                        height: 40,
                        alignment: Alignment.center,
                        decoration: BoxDecoration(
                          color: (folderCounter == '1/1') ? Colors.green.withOpacity(0.2) : Colors.white.withOpacity(0.1),
                          border: Border.all(color: (folderCounter == '1/1') ? Colors.green : Colors.white.withOpacity(0.3)),
                          borderRadius: BorderRadius.zero,
                        ),
                        child: Text(
                          folderCounter,
                          style: TextStyle(
                            color: folderCounterColor,
                            fontFamily: 'NauryzKeds',
                            fontSize: 18,
                            fontWeight: FontWeight.bold,
                          ),
                        ),
                      ),
                      const SizedBox(height: 8),
                      SizedBox(
                        width: 80,
                        height: 40,
                        child: ElevatedButton(
                          onPressed: onCheckTap,
                          style: ElevatedButton.styleFrom(
                            backgroundColor: const Color(0xFFFF6EC7).withOpacity(0.2),
                            foregroundColor: const Color(0xFFFF6EC7),
                            elevation: 0,
                            shape: RoundedRectangleBorder(borderRadius: BorderRadius.zero),
                            side: const BorderSide(color: Color(0xFFFF6EC7)),
                            padding: EdgeInsets.zero,
                          ),
                          child: isChecking
                              ? const SizedBox(
                                  width: 16,
                                  height: 16,
                                  child: CircularProgressIndicator(
                                    color: Color(0xFFFF6EC7),
                                    strokeWidth: 2,
                                  ),
                                )
                              : const Text(
                                  '–ß–ï–ö',
                                  style: TextStyle(
                                    fontFamily: 'NauryzKeds',
                                    fontSize: 14,
                                    fontWeight: FontWeight.bold,
                                  ),
                                ),
                        ),
                      ),
                    ],
                  ),
                ],
              ),
            ),
          ],
        ),
      ),
    );
  }
}

class _TaskTile extends StatelessWidget {
  final String title;
  final String subtitle;
  final IconData icon;
  final VoidCallback onTap;
  final bool done;
  final int taskNumber;
  final String counter;
  final Color counterColor;
  final VoidCallback? onCheckTap;
  final bool isChecking;

  const _TaskTile({
    required this.title,
    required this.subtitle,
    required this.icon,
    required this.onTap,
    required this.done,
    required this.taskNumber,
    required this.counter,
    required this.counterColor,
    this.onCheckTap,
    this.isChecking = false,
  });

  @override
  Widget build(BuildContext context) {
    return Container(
      margin: const EdgeInsets.symmetric(horizontal: 16, vertical: 3),
      decoration: BoxDecoration(
        color: Colors.grey[900]!.withOpacity(0.7),
      ),
      child: Material(
        color: Colors.transparent,
        child: InkWell(
          splashColor: Colors.white.withOpacity(0.08),
          highlightColor: Colors.white.withOpacity(0.04),
          onTap: onTap,
          child: ListTile(
            leading: CircleAvatar(
              backgroundColor: const Color(0xFFFF6EC7),
              child: Icon(icon, color: Colors.white),
            ),
            title: Text(
              title,
              style: const TextStyle(
                color: Colors.white,
                fontWeight: FontWeight.w600,
                fontSize: 18,
              ),
            ),
            subtitle: Text(
              subtitle,
              style: const TextStyle(
                color: Colors.white70,
                fontWeight: FontWeight.w400,
                fontSize: 15,
              ),
            ),
            trailing: Container(
              width: 80,
              height: 40,
              alignment: Alignment.center,
              decoration: BoxDecoration(
                color: done ? Colors.green.withOpacity(0.2) : Colors.white.withOpacity(0.1),
                border: Border.all(color: done ? Colors.green : Colors.white.withOpacity(0.3)),
                borderRadius: BorderRadius.zero,
              ),
              child: Text(
                counter,
                style: TextStyle(
                  color: counterColor,
                  fontFamily: 'NauryzKeds',
                  fontSize: 18,
                  fontWeight: FontWeight.bold,
                ),
              ),
            ),
          ),
        ),
      ),
    );
  }
}

class _PrizeCard extends StatelessWidget {
  final String title;
  final RichText descriptionWidget;
  final String value;
  final IconData icon;
  final Color color;
  final bool showViewButton;
  final VoidCallback? onViewPressed;
  final bool showBuyButton;
  final VoidCallback? onBuyPressed;

  const _PrizeCard({
    required this.title,
    required this.descriptionWidget,
    required this.value,
    required this.icon,
    required this.color,
    this.showViewButton = false,
    this.onViewPressed,
    this.showBuyButton = false,
    this.onBuyPressed,
  });

  @override
  Widget build(BuildContext context) {
    return Container(
      padding: const EdgeInsets.all(16),
      decoration: BoxDecoration(
        color: Colors.white.withOpacity(0.05),
        border: Border.all(color: color.withOpacity(0.3)),
        borderRadius: BorderRadius.zero, // –ö–≤–∞–¥—Ä–∞—Ç–Ω—ã–µ —Ä–∞–º–∫–∏
      ),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Row(
            children: [
              Icon(icon, color: color, size: 24),
              const SizedBox(width: 12),
              Expanded(
                child: Text(
                  title,
                  style: TextStyle(
                    color: color,
                    fontFamily: 'NauryzKeds',
                    fontSize: 18,
                    fontWeight: FontWeight.bold,
                  ),
                ),
              ),
            ],
          ),
          const SizedBox(height: 12),
          descriptionWidget,
          // –°—É–º–º–∞ –ø—Ä–∏–∑–æ–≤ –≤ –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–µ —Å–Ω–∏–∑—É –ø–æ —Ü–µ–Ω—Ç—Ä—É
          Center(
            child: Container(
              margin: const EdgeInsets.only(top: 12),
              padding: const EdgeInsets.symmetric(horizontal: 16, vertical: 8),
              decoration: BoxDecoration(
                color: color.withOpacity(0.1),
                border: Border.all(color: color.withOpacity(0.5)),
                borderRadius: BorderRadius.zero, // –ö–≤–∞–¥—Ä–∞—Ç–Ω–∞—è —Ä–∞–º–∫–∞
              ),
              child: Text(
                value,
                style: TextStyle(
                  color: color,
                  fontFamily: 'NauryzKeds',
                  fontSize: 14,
                  fontWeight: FontWeight.bold,
                ),
                textAlign: TextAlign.center,
              ),
            ),
          ),
          if (showViewButton || showBuyButton) ...[
            const SizedBox(height: 12),
            Row(
              children: [
                if (showViewButton)
                  Expanded(
                    child: OutlinedButton(
                      onPressed: onViewPressed,
                      style: OutlinedButton.styleFrom(
                        foregroundColor: Colors.white,
                        side: const BorderSide(color: Colors.white),
                        shape: RoundedRectangleBorder(
                          borderRadius: BorderRadius.zero,
                        ),
                      ),
                      child: const Text(
                        'VIEW',
                        style: TextStyle(
                          fontFamily: 'NauryzKeds',
                          fontWeight: FontWeight.bold,
                        ),
                      ),
                    ),
                  ),
                if (showViewButton && showBuyButton) const SizedBox(width: 8),
                if (showBuyButton)
                  Expanded(
                    child: ElevatedButton(
                      onPressed: onBuyPressed,
                      style: ElevatedButton.styleFrom(
                        backgroundColor: Colors.white,
                        foregroundColor: Colors.black,
                        shape: RoundedRectangleBorder(
                          borderRadius: BorderRadius.zero,
                        ),
                      ),
                      child: const Text(
                        'BUY',
                        style: TextStyle(
                          fontFamily: 'NauryzKeds',
                          fontWeight: FontWeight.bold,
                        ),
                      ),
                    ),
                  ),
              ],
            ),
          ],
        ],
      ),
    );
  }
}

class GradientButton extends StatelessWidget {
  final String text;
  final VoidCallback onTap;
  final bool enabled;

  const GradientButton({
    super.key,
    required this.text,
    required this.onTap,
    this.enabled = true,
  });

  @override
  Widget build(BuildContext context) {
    return GestureDetector(
      onTap: enabled ? onTap : null,
      child: Container(
        width: double.infinity,
        padding: const EdgeInsets.symmetric(vertical: 16),
        decoration: BoxDecoration(
          gradient: enabled
              ? const LinearGradient(
                  colors: [Colors.white, Color(0xFFFF6EC7)], // –ë–µ–ª–æ-—Ä–æ–∑–æ–≤—ã–π –≥—Ä–∞–¥–∏–µ–Ω—Ç
                  begin: Alignment.topLeft,
                  end: Alignment.bottomRight,
                )
              : LinearGradient(
                  colors: [Colors.grey.withOpacity(0.5), Colors.grey.withOpacity(0.3)],
                  begin: Alignment.topLeft,
                  end: Alignment.bottomRight,
                ),
          borderRadius: BorderRadius.zero,
        ),
        child: Text(
          text,
          textAlign: TextAlign.center,
          style: TextStyle(
            color: enabled ? Colors.black : Colors.white54, // –ß–µ—Ä–Ω—ã–π —Ç–µ–∫—Å—Ç –Ω–∞ –±–µ–ª–æ-—Ä–æ–∑–æ–≤–æ–º —Ñ–æ–Ω–µ
            fontSize: 18,
            fontWeight: FontWeight.bold,
            fontFamily: 'NauryzKeds',
          ),
        ),
      ),
    );
  }
}