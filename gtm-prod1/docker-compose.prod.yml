version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: gtm_postgres
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-gtm_db}
      POSTGRES_USER: ${POSTGRES_USER:-gtm_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-gtm_secure_password_2024}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend_new/database_schema_unified.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "127.0.0.1:5432:5432"  # Только локальный доступ
    networks:
      - gtm_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-gtm_user}"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: gtm_redis
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-gtm_redis_password}
    volumes:
      - redis_data:/data
    ports:
      - "127.0.0.1:6379:6379"  # Только локальный доступ
    networks:
      - gtm_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # API Server
  api:
    build:
      context: ./api
      dockerfile: Dockerfile
    container_name: gtm_api
    environment:
      - DATABASE_URL=${DATABASE_URL:-postgresql://gtm_user:gtm_secure_password_2024@postgres:5432/gtm_db}
      - REDIS_URL=${REDIS_URL:-redis://:gtm_redis_password@redis:6379/0}
      - DB_HOST=postgres
      - REDIS_HOST=redis
      - API_HOST=${API_HOST:-0.0.0.0}
      - API_PORT=${API_PORT:-3001}
      - DEBUG=${DEBUG:-False}
      - ENVIRONMENT=${ENVIRONMENT:-production}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
    ports:
      - "3001:3001"
    volumes:
      - ./api/uploads:/app/uploads
      - ./logs:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - gtm_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Bot Service
  bot:
    build:
      context: ./bot
      dockerfile: Dockerfile
    container_name: gtm_bot
    environment:
      - DATABASE_URL=${DATABASE_URL:-postgresql://gtm_user:gtm_secure_password_2024@postgres:5432/gtm_db}
      - REDIS_URL=${REDIS_URL:-redis://:gtm_redis_password@redis:6379/0}
      - DB_HOST=postgres
      - REDIS_HOST=redis
      - TELEGRAM_BOT_TOKEN=${TELEGRAM_BOT_TOKEN:-7533650686:AAEU4_nJZHGfzOv9XL4m_fDVt0q3dMDPQX8}
      - WEBAPP_URL=${WEBAPP_URL:-https://gtm-prod.com}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      api:
        condition: service_healthy
    networks:
      - gtm_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "python", "-c", "import requests; requests.get('http://api:3001/health')"]
      interval: 60s
      timeout: 10s
      retries: 3

  # Admin Panel (Django)
  admin:
    build:
      context: ./admin
      dockerfile: Dockerfile
    container_name: gtm_admin
    environment:
      - DATABASE_URL=${DATABASE_URL:-postgresql://gtm_user:gtm_secure_password_2024@postgres:5432/gtm_db}
      - DB_HOST=postgres
      - REDIS_HOST=redis
      - DEBUG=${DJANGO_DEBUG:-False}
      - DJANGO_SECRET_KEY=${DJANGO_SECRET_KEY:-your-secret-key-here-change-in-production}
      - ALLOWED_HOSTS=${ALLOWED_HOSTS:-gtm-prod.com,31.56.39.165,localhost}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
    ports:
      - "8000:8000"
    volumes:
      - ./admin/static:/app/static
      - ./admin/media:/app/media
      - ./logs:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - gtm_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/admin/"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: gtm_nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./webapp:/usr/share/nginx/html:ro
      - ./ssl_certs:/etc/nginx/ssl:ro
      - ./logs/nginx:/var/log/nginx
    depends_on:
      - api
      - admin
    networks:
      - gtm_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Monitoring (Optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: gtm_prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - gtm_network
    restart: unless-stopped

  grafana:
    image: grafana/grafana:latest
    container_name: gtm_grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-gtm_grafana_password}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
    networks:
      - gtm_network
    restart: unless-stopped
    depends_on:
      - prometheus

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  gtm_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16 