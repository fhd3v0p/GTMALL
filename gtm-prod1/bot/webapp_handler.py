#!/usr/bin/env python3
"""
GTM WebApp Handler
–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π —Å –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º
"""

import os
import logging
import random
import string
import aiohttp
import asyncio
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, WebAppInfo
from dotenv import load_dotenv
import psycopg2

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
DATABASE_URL = os.getenv('DATABASE_URL', 'postgresql://gtm_user:gtm_secure_password_2024@postgres:5432/gtm_db')
WEBAPP_URL = os.getenv('WEBAPP_URL', 'https://gtm.baby')
API_BASE_URL = os.getenv('API_BASE_URL', 'http://api:8000')
TELEGRAM_FOLDER_LINK = os.getenv('TELEGRAM_FOLDER_LINK', 'https://t.me/addlist/qRX5VmLZF7E3M2U9')

class WebAppHandler:
    def __init__(self):
        self.database_url = DATABASE_URL
        self.webapp_url = WEBAPP_URL
        self.api_base_url = API_BASE_URL
        self.telegram_folder_link = TELEGRAM_FOLDER_LINK
        
    async def get_total_tickets_from_db(self) -> dict:
        """–ü–æ–ª—É—á–∏—Ç—å –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∏–ª–µ—Ç–æ–≤ –∏–∑ –ë–î"""
        try:
            conn = psycopg2.connect(self.database_url)
            cursor = conn.cursor()
            
            # –ü–æ–ª—É—á–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∏–ª–µ—Ç–æ–≤ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã users
            cursor.execute("""
                SELECT SUM(tickets_count) as total_tickets FROM users
            """)
            
            result = cursor.fetchone()
            cursor.close()
            conn.close()
            
            total_tickets = result[0] if result and result[0] else 0
            
            return {'total_tickets': total_tickets}
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –±–∏–ª–µ—Ç–æ–≤ –∏–∑ –ë–î: {e}")
            return {'total_tickets': 0}
            
    async def get_user_tickets_from_api(self, user_id: int) -> dict:
        """–ü–æ–ª—É—á–∏—Ç—å –±–∏–ª–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ API"""
        try:
            async with aiohttp.ClientSession() as session:
                async with session.get(f"{self.api_base_url}/api/tickets/user/{user_id}") as response:
                    if response.status == 200:
                        data = await response.json()
                        return data
                    else:
                        logger.error(f"API –≤–µ—Ä–Ω—É–ª —Å—Ç–∞—Ç—É—Å {response.status} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                        return None
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∏–ª–µ—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
            return None
            
    def get_telegram_folder_link(self) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ Telegram –ø–∞–ø–∫—É"""
        return self.telegram_folder_link
        
    def generate_referral_code(self) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥"""
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–¥ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: refGTM + 7 —Å–ª—É—á–∞–π–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
        random_chars = ''.join(random.choices(string.ascii_uppercase + string.digits, k=7))
        return f"refGTM{random_chars}"
        
    async def get_or_create_referral_code(self, user_id: int) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            conn = psycopg2.connect(self.database_url)
            cursor = conn.cursor()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∫–æ–¥ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            cursor.execute("""
                SELECT referral_code FROM users WHERE telegram_id = %s
            """, (user_id,))
            
            result = cursor.fetchone()
            
            if result and result[0]:
                # –ö–æ–¥ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
                referral_code = result[0]
            else:
                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π –∫–æ–¥
                referral_code = self.generate_referral_code()
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å –∫–æ–¥–∞
                while True:
                    cursor.execute("""
                        SELECT telegram_id FROM users WHERE referral_code = %s
                    """, (referral_code,))
                    
                    if not cursor.fetchone():
                        break
                    referral_code = self.generate_referral_code()
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–¥
                cursor.execute("""
                    UPDATE users SET referral_code = %s WHERE telegram_id = %s
                """, (referral_code, user_id))
                
                conn.commit()
            
            cursor.close()
            conn.close()
            
            return referral_code
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è/—Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞: {e}")
            return f"refGTM{user_id}"  # Fallback
            
    def get_invite_keyboard(self, referral_code: str):
        """–°–æ–∑–¥–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –¥—Ä—É–∑–µ–π"""
        keyboard = [
            [
                InlineKeyboardButton(
                    text="üÉè –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–∑–µ–π",
                    web_app=WebAppInfo(url=f"{self.webapp_url}/invite?ref={referral_code}")
                ),
                InlineKeyboardButton(
                    text="üé∞ –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞",
                    callback_data="my_stats"
                )
            ]
        ]
        return InlineKeyboardMarkup(keyboard)
        
    def get_invite_message(self, user_first_name: str, referral_code: str) -> str:
        """–°–æ–∑–¥–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –¥—Ä—É–∑–µ–π"""
        invite_text = f"""üé∞ <b>–ü—Ä–∏–≥–ª–∞—Å–∏ –¥—Ä—É–∑–µ–π –≤ GTM!</b>

üëã –ü—Ä–∏–≤–µ—Ç, {user_first_name}! 

üé≤ –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Å—è ‚Äî –∏ –±—É–¥—å –≤ –∏–≥—Ä–µ üé≤
#GTM #GothamsTopModel #Giveaway

üé´ –ó–∞ –∫–∞–∂–¥–æ–≥–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω–æ–≥–æ –¥—Ä—É–≥–∞ —Ç—ã –ø–æ–ª—É—á–∏—à—å +1 –±–∏–ª–µ—Ç –≤ —Ä–æ–∑—ã–≥—Ä—ã—à!

üîó –¢–≤–æ—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:
<pre>https://t.me/GTM_ROBOT?start={referral_code}</pre>"""
        
        return invite_text
        
    async def add_referral_ticket_by_code(self, referral_code: str):
        """–î–æ–±–∞–≤–∏—Ç—å –±–∏–ª–µ—Ç –∑–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–∞ –ø–æ –∫–æ–¥—É"""
        try:
            conn = psycopg2.connect(self.database_url)
            cursor = conn.cursor()
            
            # –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–º—É –∫–æ–¥—É
            cursor.execute("""
                SELECT telegram_id, tickets_count FROM users WHERE referral_code = %s
            """, (referral_code,))
            
            result = cursor.fetchone()
            
            if result:
                referrer_id, current_tickets = result
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∏–ª–µ—Ç–æ–≤ –ª–∏–º–∏—Ç (10 —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã—Ö + 1 –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É)
                if current_tickets < 11:  # –ú–∞–∫—Å–∏–º—É–º 11 –±–∏–ª–µ—Ç–æ–≤ (10 —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã—Ö + 1 –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É)
                    # –î–æ–±–∞–≤–ª—è–µ–º –±–∏–ª–µ—Ç —Ä–µ—Ñ–µ—Ä–µ—Ä—É
                    cursor.execute("""
                        UPDATE users 
                        SET tickets_count = tickets_count + 1
                        WHERE telegram_id = %s
                    """, (referrer_id,))
                    
                    conn.commit()
                    logger.info(f"–ù–∞—á–∏—Å–ª–µ–Ω –±–∏–ª–µ—Ç –∑–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–∞ –ø–æ –∫–æ–¥—É {referral_code}: {referrer_id}")
                else:
                    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {referrer_id} —É–∂–µ –∏–º–µ–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∏–ª–µ—Ç–æ–≤")
            else:
                logger.warning(f"–†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω: {referral_code}")
            
            cursor.close()
            conn.close()
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –±–∏–ª–µ—Ç–∞ –∑–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–∞ –ø–æ –∫–æ–¥—É: {e}")
            
    async def get_user_stats(self, user_id: int) -> dict:
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            conn = psycopg2.connect(self.database_url)
            cursor = conn.cursor()
            
            cursor.execute("""
                SELECT tickets_count, has_subscription_ticket, referral_code 
                FROM users WHERE telegram_id = %s
            """, (user_id,))
            
            result = cursor.fetchone()
            cursor.close()
            conn.close()
            
            if result:
                tickets_count, has_subscription_ticket, referral_code = result
                referral_tickets = max(0, tickets_count - (1 if has_subscription_ticket else 0))
                
                return {
                    'total_tickets': tickets_count,
                    'subscription_tickets': 1 if has_subscription_ticket else 0,
                    'referral_tickets': referral_tickets,
                    'referral_code': referral_code or f"refGTM{user_id}"
                }
            else:
                return {
                    'total_tickets': 0,
                    'subscription_tickets': 0,
                    'referral_tickets': 0,
                    'referral_code': f"refGTM{user_id}"
                }
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
            return {
                'total_tickets': 0,
                'subscription_tickets': 0,
                'referral_tickets': 0,
                'referral_code': f"refGTM{user_id}"
            }
            
    async def simulate_ai_search(self, category: str) -> dict:
        """–ò–º–∏—Ç–∞—Ü–∏—è AI –ø–æ–∏—Å–∫–∞ –ø–æ —Ñ–æ—Ç–æ"""
        # –°–ø–∏—Å–æ–∫ –∞—Ä—Ç–∏—Å—Ç–æ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        artists_by_category = {
            'tattoo': [
                {'name': 'Alena'},
                {'name': 'EMI'},
                {'name': 'Lin++'},
                {'name': 'MurderDoll'},
                {'name': 'BloodiVamp'}
            ],
            'piercing': [
                {'name': '–ß—É—á—É–Ω–¥—Ä–∞'},
                {'name': 'naidenka'},
                {'name': '–ü–æ—Ç–µ—Ä—è—à–∫–∞'}
            ],
            'hair': [
                {'name': 'Gothams Top Model'},
                {'name': '–†–µ–∂—å –º–µ–Ω—è –≤—Å–µ—Ä—å—ë–∑'}
            ]
        }
        
        # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ–≥–æ –∞—Ä—Ç–∏—Å—Ç–∞ –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        if category in artists_by_category:
            artist = random.choice(artists_by_category[category])
            return {
                'success': True,
                'artist': artist,
                'category': category,
                'message': f"AI –Ω–∞—à–µ–ª –∏–¥–µ–∞–ª—å–Ω–æ–≥–æ –∞—Ä—Ç–∏—Å—Ç–∞ –¥–ª—è –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞!"
            }
        else:
            return {
                'success': False,
                'message': f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è '{category}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
            } 