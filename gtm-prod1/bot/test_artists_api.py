#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ API –∞—Ä—Ç–∏—Å—Ç–æ–≤ –≤ GTM
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∑–∞–≥—Ä—É–∑–∫—É –∞—Ä—Ç–∏—Å—Ç–æ–≤ –∏–∑ Supabase
"""

import os
import json
import requests
from typing import Dict, List

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Supabase
SUPABASE_URL = "https://rxmtovqxjsvogyywyrha.supabase.co"
SUPABASE_ANON_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InJ4bXRvdnF4anN2b2d5eXd5cmhhIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTQ1Mjg1NTAsImV4cCI6MjA3MDEwNDU1MH0.gDkJybktFoi486hbIVwppDfmVQlAR0fM4o4Sl1-AxhE"

class SupabaseAPI:
    def __init__(self):
        self.base_url = SUPABASE_URL
        self.headers = {
            'apikey': SUPABASE_ANON_KEY,
            'Authorization': f'Bearer {SUPABASE_ANON_KEY}',
            'Content-Type': 'application/json'
        }
    
    def test_connection(self) -> bool:
        """–¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Supabase"""
        try:
            response = requests.get(f"{self.base_url}/rest/v1/", headers=self.headers)
            print(f"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Supabase: {response.status_code}")
            return response.status_code == 200
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Supabase: {e}")
            return False
    
    def get_cities(self) -> List[Dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≥–æ—Ä–æ–¥–æ–≤"""
        try:
            response = requests.get(
                f"{self.base_url}/rest/v1/cities?select=*&is_active=eq.true&order=name.asc",
                headers=self.headers
            )
            if response.status_code == 200:
                cities = response.json()
                print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –≥–æ—Ä–æ–¥–æ–≤: {len(cities)}")
                for city in cities:
                    print(f"   - {city['name']} ({city['code']}) - –Ω–∞—Å–µ–ª–µ–Ω–∏–µ: {city.get('population', 'N/A')}")
                return cities
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≥–æ—Ä–æ–¥–æ–≤: {response.status_code}")
                return []
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≥–æ—Ä–æ–¥–æ–≤: {e}")
            return []
    
    def get_categories(self) -> List[Dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π"""
        try:
            response = requests.get(
                f"{self.base_url}/rest/v1/categories?select=*&is_active=eq.true&order=name.asc",
                headers=self.headers
            )
            if response.status_code == 200:
                categories = response.json()
                print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: {len(categories)}")
                for cat in categories:
                    print(f"   - {cat['name']} ({cat['type']}) - {cat.get('description', '')}")
                return categories
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: {response.status_code}")
                return []
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: {e}")
            return []
    
    def get_artists_filtered(self, city: str = '', category: str = '') -> List[Dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∞—Ä—Ç–∏—Å—Ç–æ–≤ —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π"""
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º RPC —Ñ—É–Ω–∫—Ü–∏—é
            data = {
                'p_city': city,
                'p_category': category,
                'p_limit': 50,
                'p_offset': 0
            }
            
            response = requests.post(
                f"{self.base_url}/rest/v1/rpc/get_artists_filtered",
                headers=self.headers,
                json=data
            )
            
            if response.status_code == 200:
                artists = response.json()
                print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –∞—Ä—Ç–∏—Å—Ç–æ–≤: {len(artists)} (—Ñ–∏–ª—å—Ç—Ä: –≥–æ—Ä–æ–¥='{city}', –∫–∞—Ç–µ–≥–æ—Ä–∏—è='{category}')")
                
                for artist in artists:
                    print(f"   - {artist['name']} ({artist.get('city_name', 'N/A')}) - {artist.get('category_name', 'N/A')}")
                    if artist.get('telegram'):
                        print(f"     Telegram: {artist['telegram']}")
                    if artist.get('gallery_urls'):
                        print(f"     –ì–∞–ª–µ—Ä–µ—è: {len(artist['gallery_urls'])} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
                
                return artists
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞—Ä—Ç–∏—Å—Ç–æ–≤: {response.status_code}")
                print(f"   –û—Ç–≤–µ—Ç: {response.text}")
                return []
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∞—Ä—Ç–∏—Å—Ç–æ–≤: {e}")
            return []
    
    def search_chchundra(self) -> List[Dict]:
        """–ü–æ–∏—Å–∫ –∞—Ä—Ç–∏—Å—Ç–∞ –ß—É—á—É–Ω–¥—Ä–∞"""
        print("\nüîç –ü–æ–∏—Å–∫ –∞—Ä—Ç–∏—Å—Ç–∞ '–ß—É—á—É–Ω–¥—Ä–∞'...")
        
        # –ü–æ–∏—Å–∫ –ø–æ –∏–º–µ–Ω–∏ —á–µ—Ä–µ–∑ –ø—Ä—è–º–æ–π –∑–∞–ø—Ä–æ—Å
        try:
            response = requests.get(
                f"{self.base_url}/rest/v1/artists?select=*,cities(name),categories(name,type)&name=ilike.*–ß—É—á—É–Ω–¥—Ä–∞*&is_active=eq.true",
                headers=self.headers
            )
            
            if response.status_code == 200:
                artists = response.json()
                print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π –∞—Ä—Ç–∏—Å—Ç–∞ '–ß—É—á—É–Ω–¥—Ä–∞': {len(artists)}")
                
                for artist in artists:
                    print(f"   - ID: {artist['id']}")
                    print(f"   - –ò–º—è: {artist['name']}")
                    print(f"   - Username: {artist.get('username', 'N/A')}")
                    print(f"   - –ì–æ—Ä–æ–¥: {artist.get('cities', {}).get('name', 'N/A') if artist.get('cities') else 'N/A'}")
                    print(f"   - –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {artist.get('categories', {}).get('name', 'N/A') if artist.get('categories') else 'N/A'}")
                    print(f"   - –†–µ–π—Ç–∏–Ω–≥: {artist.get('rating', 0)}")
                    print(f"   - Telegram: {artist.get('telegram', 'N/A')}")
                    print("   ---")
                
                return artists
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –∞—Ä—Ç–∏—Å—Ç–∞: {response.status_code}")
                return []
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∞—Ä—Ç–∏—Å—Ç–∞: {e}")
            return []

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üß™ GTM Artists API Test")
    print("=" * 50)
    
    api = SupabaseAPI()
    
    # –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    print("\n1. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è...")
    if not api.test_connection():
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Supabase. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ.")
        return
    
    # –¢–µ—Å—Ç –≥–æ—Ä–æ–¥–æ–≤
    print("\n2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ä–æ–¥–æ–≤...")
    cities = api.get_cities()
    
    # –¢–µ—Å—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    print("\n3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π...")
    categories = api.get_categories()
    
    # –¢–µ—Å—Ç –∞—Ä—Ç–∏—Å—Ç–æ–≤
    print("\n4. –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö –∞—Ä—Ç–∏—Å—Ç–æ–≤...")
    all_artists = api.get_artists_filtered()
    
    # –¢–µ—Å—Ç —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ –ú–æ—Å–∫–≤–µ
    print("\n5. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞—Ä—Ç–∏—Å—Ç–æ–≤ –≤ –ú–æ—Å–∫–≤–µ...")
    moscow_artists = api.get_artists_filtered(city='–ú–æ—Å–∫–≤–∞')
    
    # –¢–µ—Å—Ç —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ Tattoo
    print("\n6. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞—Ä—Ç–∏—Å—Ç–æ–≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ Tattoo...")
    tattoo_artists = api.get_artists_filtered(category='Tattoo')
    
    # –ü–æ–∏—Å–∫ –ß—É—á—É–Ω–¥—Ä–∞
    print("\n7. –ü–æ–∏—Å–∫ –∞—Ä—Ç–∏—Å—Ç–∞ '–ß—É—á—É–Ω–¥—Ä–∞'...")
    chchundra_artists = api.search_chchundra()
    
    # –ò—Ç–æ–≥–∏
    print("\n" + "=" * 50)
    print("üìä –ò–¢–û–ì–ò –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:")
    print(f"   –ì–æ—Ä–æ–¥–æ–≤ –≤ –ë–î: {len(cities)}")
    print(f"   –ö–∞—Ç–µ–≥–æ—Ä–∏–π –≤ –ë–î: {len(categories)}")
    print(f"   –í—Å–µ–≥–æ –∞—Ä—Ç–∏—Å—Ç–æ–≤: {len(all_artists)}")
    print(f"   –ê—Ä—Ç–∏—Å—Ç–æ–≤ –≤ –ú–æ—Å–∫–≤–µ: {len(moscow_artists)}")
    print(f"   Tattoo-–∞—Ä—Ç–∏—Å—Ç–æ–≤: {len(tattoo_artists)}")
    print(f"   –ù–∞–π–¥–µ–Ω–æ '–ß—É—á—É–Ω–¥—Ä–∞': {len(chchundra_artists)}")
    
    if len(chchundra_artists) > 0:
        print("‚úÖ –ê—Ä—Ç–∏—Å—Ç '–ß—É—á—É–Ω–¥—Ä–∞' —É—Å–ø–µ—à–Ω–æ –Ω–∞–π–¥–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ!")
    else:
        print("‚ùå –ê—Ä—Ç–∏—Å—Ç '–ß—É—á—É–Ω–¥—Ä–∞' –Ω–µ –Ω–∞–π–¥–µ–Ω. –ù—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –≤ –ë–î.")

if __name__ == "__main__":
    main()