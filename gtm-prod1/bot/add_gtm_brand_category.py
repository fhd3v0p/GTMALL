#!/usr/bin/env python3
"""
–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ GTM BRAND –∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ –µ—ë –∞—Ä—Ç–∏—Å—Ç—É GTM
"""

import requests
import json

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
SUPABASE_URL = "https://rxmtovqxjsvogyywyrha.supabase.co"
SUPABASE_ANON_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InJ4bXRvdnF4anN2b2d5eXd5cmhhIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTQ1Mjg1NTAsImV4cCI6MjA3MDEwNDU1MH0.gDkJybktFoi486hbIVwppDfmVQlAR0fM4o4Sl1-AxhE"

headers = {
    'apikey': SUPABASE_ANON_KEY,
    'Authorization': f'Bearer {SUPABASE_ANON_KEY}',
    'Content-Type': 'application/json',
    'Prefer': 'return=representation'
}

def add_gtm_brand_category():
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ GTM BRAND"""
    print("‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ GTM BRAND...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—è GTM BRAND
    response = requests.get(
        f"{SUPABASE_URL}/rest/v1/categories?name=eq.GTM%20BRAND&select=id",
        headers=headers
    )
    
    if response.status_code == 200:
        existing_categories = response.json()
        if existing_categories:
            print(f"‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è GTM BRAND —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç —Å ID: {existing_categories[0]['id']}")
            return existing_categories[0]['id']
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é GTM BRAND
    category_data = {
        "name": "GTM BRAND",
        "description": "–ë—Ä–µ–Ω–¥–æ–≤—ã–µ —Ç–æ–≤–∞—Ä—ã GTM",
        "type": "product"
    }
    
    response = requests.post(
        f"{SUPABASE_URL}/rest/v1/categories",
        headers=headers,
        json=category_data
    )
    
    if response.status_code in [200, 201]:
        new_category = response.json()
        category_id = new_category[0]['id'] if isinstance(new_category, list) else new_category['id']
        print(f"‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è GTM BRAND –¥–æ–±–∞–≤–ª–µ–Ω–∞ —Å ID: {category_id}")
        return category_id
    else:
        print(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ GTM BRAND: {response.status_code}")
        print(f"   –û—Ç–≤–µ—Ç: {response.text}")
        return None

def assign_gtm_brand_to_artist(category_id):
    """–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ GTM BRAND –∞—Ä—Ç–∏—Å—Ç—É GTM (ID 14)"""
    print(f"\nüè∑Ô∏è –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ GTM BRAND (ID: {category_id}) –∞—Ä—Ç–∏—Å—Ç—É GTM...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Å–≤—è–∑—å
    response = requests.get(
        f"{SUPABASE_URL}/rest/v1/artist_categories?artist_id=eq.14&category_id=eq.{category_id}",
        headers=headers
    )
    
    if response.status_code == 200:
        existing_relations = response.json()
        if existing_relations:
            print("‚úÖ –°–≤—è–∑—å –∞—Ä—Ç–∏—Å—Ç–∞ GTM —Å –∫–∞—Ç–µ–≥–æ—Ä–∏–µ–π GTM BRAND —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            return True
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Å–≤—è–∑—å –∞—Ä—Ç–∏—Å—Ç–∞ GTM —Å –∫–∞—Ç–µ–≥–æ—Ä–∏–µ–π GTM BRAND
    artist_category_data = {
        "artist_id": 14,
        "category_id": category_id
    }
    
    response = requests.post(
        f"{SUPABASE_URL}/rest/v1/artist_categories",
        headers=headers,
        json=artist_category_data
    )
    
    if response.status_code in [200, 201]:
        print("‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è GTM BRAND –Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –∞—Ä—Ç–∏—Å—Ç—É GTM")
        return True
    else:
        print(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {response.status_code}")
        print(f"   –û—Ç–≤–µ—Ç: {response.text}")
        return False

def check_all_categories():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π"""
    print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π...")
    
    response = requests.get(
        f"{SUPABASE_URL}/rest/v1/categories?select=id,name,type&order=id",
        headers=headers
    )
    
    if response.status_code == 200:
        categories = response.json()
        print(f"üìä –í—Å–µ–≥–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: {len(categories)}")
        
        for category in categories:
            print(f"  ‚Ä¢ ID {category['id']}: {category['name']} ({category['type']})")
        
        return True
    else:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: {response.status_code}")
        return False

def check_artist_categories():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∞—Ä—Ç–∏—Å—Ç–∞ GTM"""
    print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∞—Ä—Ç–∏—Å—Ç–∞ GTM...")
    
    response = requests.get(
        f"{SUPABASE_URL}/rest/v1/artist_categories?artist_id=eq.14&select=category_id",
        headers=headers
    )
    
    if response.status_code == 200:
        artist_categories = response.json()
        print(f"üìä –ö–∞—Ç–µ–≥–æ—Ä–∏–π —É –∞—Ä—Ç–∏—Å—Ç–∞ GTM: {len(artist_categories)}")
        
        for relation in artist_categories:
            print(f"  ‚Ä¢ –ö–∞—Ç–µ–≥–æ—Ä–∏—è ID: {relation['category_id']}")
        
        return True
    else:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∞—Ä—Ç–∏—Å—Ç–∞: {response.status_code}")
        return False

def main():
    print("üè∑Ô∏è –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ GTM BRAND –∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ –∞—Ä—Ç–∏—Å—Ç—É GTM")
    print("=" * 60)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é GTM BRAND
    category_id = add_gtm_brand_category()
    
    if category_id:
        # –ù–∞–∑–Ω–∞—á–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∞—Ä—Ç–∏—Å—Ç—É GTM
        assign_gtm_brand_to_artist(category_id)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        check_all_categories()
        check_artist_categories()
    
    print("\n‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ GTM BRAND –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")

if __name__ == "__main__":
    main() 