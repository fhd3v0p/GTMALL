#!/usr/bin/env python3
"""
–û—á–∏—Å—Ç–∫–∞ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ GTM –∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ GTM BRAND
"""

import requests
import json

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
SUPABASE_URL = "https://rxmtovqxjsvogyywyrha.supabase.co"
SUPABASE_ANON_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InJ4bXRvdnF4anN2b2d5eXd5cmhhIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTQ1Mjg1NTAsImV4cCI6MjA3MDEwNDU1MH0.gDkJybktFoi486hbIVwppDfmVQlAR0fM4o4Sl1-AxhE"

headers = {
    'apikey': SUPABASE_ANON_KEY,
    'Authorization': f'Bearer {SUPABASE_ANON_KEY}',
    'Content-Type': 'application/json',
    'Prefer': 'return=representation'
}

def delete_gtm_duplicates():
    """–£–¥–∞–ª–µ–Ω–∏–µ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ GTM (ID 15 –∏ 16)"""
    print("üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ GTM...")
    
    duplicates_to_delete = [15, 16]  # ID –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ GTM
    
    for artist_id in duplicates_to_delete:
        print(f"üóëÔ∏è –£–¥–∞–ª—è–µ–º –∞—Ä—Ç–∏—Å—Ç–∞ —Å ID {artist_id}...")
        
        # –£–¥–∞–ª—è–µ–º –∞—Ä—Ç–∏—Å—Ç–∞
        response = requests.delete(
            f"{SUPABASE_URL}/rest/v1/artists?id=eq.{artist_id}",
            headers=headers
        )
        
        if response.status_code == 200:
            print(f"  ‚úÖ –ê—Ä—Ç–∏—Å—Ç —Å ID {artist_id} —É–¥–∞–ª–µ–Ω")
        else:
            print(f"  ‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∞—Ä—Ç–∏—Å—Ç–∞ {artist_id}: {response.status_code}")
    
    print("‚úÖ –£–¥–∞–ª–µ–Ω–∏–µ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")

def assign_gtm_brand_category():
    """–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ GTM BRAND –¥–ª—è –∞—Ä—Ç–∏—Å—Ç–∞ GTM (ID 14)"""
    print("\nüè∑Ô∏è –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ GTM BRAND –¥–ª—è GTM...")
    
    # –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º ID –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ GTM BRAND
    response = requests.get(
        f"{SUPABASE_URL}/rest/v1/categories?name=eq.GTM%20BRAND&select=id",
        headers=headers
    )
    
    if response.status_code != 200:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ GTM BRAND: {response.status_code}")
        return False
    
    categories = response.json()
    if not categories:
        print("‚ùå –ö–∞—Ç–µ–≥–æ—Ä–∏—è GTM BRAND –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return False
    
    category_id = categories[0]['id']
    print(f"üìã –ù–∞–π–¥–µ–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è GTM BRAND —Å ID: {category_id}")
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Å–≤—è–∑—å –∞—Ä—Ç–∏—Å—Ç–∞ GTM (ID 14) —Å –∫–∞—Ç–µ–≥–æ—Ä–∏–µ–π GTM BRAND
    artist_category_data = {
        "artist_id": 14,
        "category_id": category_id
    }
    
    response = requests.post(
        f"{SUPABASE_URL}/rest/v1/artist_categories",
        headers=headers,
        json=artist_category_data
    )
    
    if response.status_code in [200, 201]:
        print("‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è GTM BRAND –Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –∞—Ä—Ç–∏—Å—Ç—É GTM")
        return True
    else:
        print(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {response.status_code}")
        return False

def check_artists_after_cleanup():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞—Ä—Ç–∏—Å—Ç–æ–≤ –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏"""
    print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞—Ä—Ç–∏—Å—Ç–æ–≤ –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏...")
    
    response = requests.get(
        f"{SUPABASE_URL}/rest/v1/artists?select=id,name&order=id",
        headers=headers
    )
    
    if response.status_code == 200:
        artists = response.json()
        print(f"üìä –í—Å–µ–≥–æ –∞—Ä—Ç–∏—Å—Ç–æ–≤: {len(artists)}")
        
        for artist in artists:
            print(f"  ‚Ä¢ ID {artist['id']}: {artist['name']}")
        
        return True
    else:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞—Ä—Ç–∏—Å—Ç–æ–≤: {response.status_code}")
        return False

def main():
    print("üßπ –û—á–∏—Å—Ç–∫–∞ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ GTM –∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")
    print("=" * 60)
    
    # –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
    delete_gtm_duplicates()
    
    # –ù–∞–∑–Ω–∞—á–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é GTM BRAND
    assign_gtm_brand_category()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    check_artists_after_cleanup()
    
    print("\n‚úÖ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")

if __name__ == "__main__":
    main() 