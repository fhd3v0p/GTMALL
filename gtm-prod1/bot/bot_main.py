#!/usr/bin/env python3
"""
GTM Telegram Bot
–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–æ–∫ –Ω–∞ –∫–∞–Ω–∞–ª—ã –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∏–ª–µ—Ç–∞–º–∏
"""

import os
import logging
import asyncio
import random
import string
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, WebAppInfo
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes, CallbackQueryHandler
from dotenv import load_dotenv
import psycopg2
import redis
import json
from webapp_handler import WebAppHandler

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
TELEGRAM_BOT_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN', '7533650686:AAEU4_nJZHGfzOv9XL4m_fDVt0q3dMDPQX8')
DATABASE_URL = os.getenv('DATABASE_URL', 'postgresql://gtm_user:gtm_secure_password_2024@postgres:5432/gtm_db')
REDIS_URL = os.getenv('REDIS_URL', 'redis://redis:6379/0')
TELEGRAM_FOLDER_LINK = os.getenv('TELEGRAM_FOLDER_LINK', 'https://t.me/addlist/qRX5VmLZF7E3M2U9')
WEBAPP_URL = os.getenv('WEBAPP_URL', 'https://gtm.baby')

# –ö–∞–Ω–∞–ª—ã –ø–æ–¥–ø–∏—Å–∫–∏ (9 –∫–∞–Ω–∞–ª–æ–≤)
SUBSCRIPTION_CHANNELS = [
    {'channel_id': -1002088959587, 'channel_username': 'rejmenyavseryoz', 'channel_name': '–†–µ–∂—å –º–µ–Ω—è –≤—Å–µ—Ä—å—ë–∑'},
    {'channel_id': -1001971855072, 'channel_username': 'chchndra_tattoo', 'channel_name': '–ß—É—á—É–Ω–¥—Ä–∞'},
    {'channel_id': -1002133674248, 'channel_username': 'naidenka_tattoo', 'channel_name': 'naidenka_tattoo'},
    {'channel_id': -1001508215942, 'channel_username': 'l1n_ttt', 'channel_name': 'Lin++'},
    {'channel_id': -1001555462429, 'channel_username': 'murderd0lll', 'channel_name': 'MurderdOll'},
    {'channel_id': -1002132954014, 'channel_username': 'poteryashkatattoo', 'channel_name': '–ü–æ—Ç–µ—Ä—è—à–∫–∞'},
    {'channel_id': -1001689395571, 'channel_username': 'EMI3MO', 'channel_name': 'EMI'},
    {'channel_id': -1001767997947, 'channel_username': 'bloodivamp', 'channel_name': 'bloodivamp'},
    {'channel_id': -1001973736826, 'channel_username': 'G_T_MODEL', 'channel_name': 'Gothams top model'},
]

class GTMBot:
    def __init__(self):
        self.application = Application.builder().token(TELEGRAM_BOT_TOKEN).build()
        self.webapp_handler = WebAppHandler()
        self.setup_handlers()
        
    def setup_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥"""
        self.application.add_handler(CommandHandler("start", self.start_command))
        self.application.add_handler(CommandHandler("check", self.check_subscription))
        self.application.add_handler(CommandHandler("tickets", self.show_tickets))
        self.application.add_handler(CommandHandler("folder", self.show_folder))
        self.application.add_handler(CommandHandler("invite", self.invite_command))
        self.application.add_handler(CommandHandler("stats", self.stats_command))
        self.application.add_handler(CommandHandler("help", self.help_command))
        self.application.add_handler(CallbackQueryHandler(self.handle_callback))
        self.application.add_handler(MessageHandler(filters.TEXT & filters.Regex(r'^üÉè –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–∑–µ–π$'), self.handle_invite_button))
        
    def get_webapp_keyboard(self):
        """–°–æ–∑–¥–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏"""
        keyboard = [
            [
                InlineKeyboardButton(
                    text="üîÆ Open GTM",
                    web_app=WebAppInfo(url=WEBAPP_URL)
                ),
                InlineKeyboardButton(
                    text="üí≠ CHAT",
                    url="https://t.me/G_T_MODEL/10"
                )
            ]
        ]
        return InlineKeyboardMarkup(keyboard)
        
    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        user = update.effective_user
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É
        referral_code = None
        if context.args and len(context.args) > 0:
            referral_code = context.args[0]
            # –ù–∞—á–∏—Å–ª—è–µ–º –±–∏–ª–µ—Ç —Ä–µ—Ñ–µ—Ä–µ—Ä—É, –µ—Å–ª–∏ —ç—Ç–æ –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            if await self.is_new_user(user.id):
                await self.webapp_handler.add_referral_ticket_by_code(referral_code)
        
        welcome_message = f"""‚ò†Ô∏è –ü—Ä–∏–≤–µ—Ç, {user.first_name}! ‚ò†Ô∏è

üëÑ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤–æ Gotham's Top Model ‚Äî –ø–ª–∞—Ç—Ñ–æ—Ä–º—É –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –ª—É—á—à–∏—Ö –∞—Ä—Ç–∏—Å—Ç–æ–≤ –≤ —Ç–≤–æ–µ–º –≥–æ—Ä–æ–¥–µ!

–ß—Ç–æ —É –Ω–∞—Å –µ—Å—Ç—å:
ü§ñ AI-–ø–æ–∏—Å–∫ —É—Å–ª—É–≥ –ø–æ —Ä–µ—Ñ–µ—Ä–µ–Ω—Å–∞–º
üÉè –ö–∞—Ç–∞–ª–æ–≥ —Ç–æ–ø–æ–≤—ã—Ö –∞—Ä—Ç–∏—Å—Ç–æ–≤
üé∞ –†–æ–∑—ã–≥—Ä—ã—à –ø—Ä–∏–∑–æ–≤ –Ω–∞ >130,000‚ÇΩ
üé± –°–∫–∏–¥–∫–∞ 8% –Ω–∞ —É—Å–ª—É–≥–∏ –≤—Å–µ—Ö —Ä–µ–∑–∏–¥–µ–Ω—Ç–æ–≤ GTM
üíû –©–µ–¥—Ä–∞—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞

–ù–∞–∂–º–∏ ¬´üîÆ Open GTM¬ª, —á—Ç–æ–±—ã –≤–æ—Ä–≤–∞—Ç—å—Å—è!"""
        
        await update.message.reply_text(
            welcome_message,
            reply_markup=self.get_webapp_keyboard()
        )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
        await self.save_user(user)
        
    async def check_subscription(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª—ã"""
        user = update.effective_user
        chat_id = update.effective_chat.id
        
        await update.message.reply_text("üîç –ü—Ä–æ–≤–µ—Ä—è—é –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª—ã...")
        
        subscribed_channels = []
        not_subscribed_channels = []
        
        for channel in SUBSCRIPTION_CHANNELS:
            try:
                member = await context.bot.get_chat_member(
                    chat_id=channel['channel_id'],
                    user_id=user.id
                )
                
                if member.status in ['member', 'administrator', 'creator']:
                    subscribed_channels.append(channel)
                else:
                    not_subscribed_channels.append(channel)
                    
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–∞–Ω–∞–ª–∞ {channel['channel_name']}: {e}")
                not_subscribed_channels.append(channel)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        response = "üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–æ–∫:\n\n"
        
        if subscribed_channels:
            response += "‚úÖ –ü–æ–¥–ø–∏—Å–∞–Ω –Ω–∞:\n"
            for channel in subscribed_channels:
                response += f"‚Ä¢ {channel['channel_name']}\n"
            response += "\n"
        
        if not_subscribed_channels:
            response += "‚ùå –ù–µ –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞:\n"
            for channel in not_subscribed_channels:
                response += f"‚Ä¢ {channel['channel_name']}\n"
            response += "\n"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–¥–ø–∏—Å–∞–Ω –ª–∏ –Ω–∞ –≤—Å–µ 9 –∫–∞–Ω–∞–ª–æ–≤
        if len(subscribed_channels) == 9:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –Ω–∞—á–∏—Å–ª—è–ª–∏ –ª–∏ —É–∂–µ –±–∏–ª–µ—Ç –∑–∞ –ø–æ–¥–ø–∏—Å–∫–∏
            if not await self.has_subscription_ticket(user.id):
                await self.add_subscription_ticket(user.id)
                response += "üé´ –ù–∞—á–∏—Å–ª–µ–Ω–æ –±–∏–ª–µ—Ç–æ–≤: +1 (–∑–∞ –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –≤—Å–µ –∫–∞–Ω–∞–ª—ã)"
            else:
                response += "‚úÖ –ë–∏–ª–µ—Ç –∑–∞ –ø–æ–¥–ø–∏—Å–∫–∏ —É–∂–µ –Ω–∞—á–∏—Å–ª–µ–Ω"
        else:
            response += f"‚ö†Ô∏è –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –±–∏–ª–µ—Ç–∞ –Ω—É–∂–Ω–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –≤—Å–µ {len(SUBSCRIPTION_CHANNELS)} –∫–∞–Ω–∞–ª–æ–≤\n\n"
            response += f"üìÅ –ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –ø–∞–ø–∫—É GTM: {TELEGRAM_FOLDER_LINK}\n"
            response += "üîí –ù–µ –æ—Ç–ø–∏—Å—ã–≤–∞–π—Ç–µ—Å—å –¥–æ –∫–æ–Ω—Ü–∞ —Ä–æ–∑—ã–≥—Ä—ã—à–∞!"
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–µ –±–∏–ª–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_tickets = await self.get_user_tickets(user.id)
        total_tickets = await self.get_total_tickets()
        response += f"\nüé´ –í–∞—à–∏ –±–∏–ª–µ—Ç—ã: {user_tickets}/{total_tickets}"
        
        await update.message.reply_text(response)
        
    async def show_tickets(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∏–ª–µ—Ç–æ–≤"""
        user = update.effective_user
        user_tickets = await self.get_user_tickets(user.id)
        total_tickets = await self.get_total_tickets()
        
        message = f"""üé´ –ë–∏–ª–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.first_name}

üìä –í–∞—à–∏ –±–∏–ª–µ—Ç—ã: {user_tickets}/{total_tickets}

üéÅ –£—á–∞—Å—Ç–≤—É–π—Ç–µ –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ GTM!"""
        await update.message.reply_text(message)
        
    async def show_folder(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ –ø–∞–ø–∫—É GTM"""
        message = f"""üìÅ Telegram –ø–∞–ø–∫–∞ GTM

üîó –°—Å—ã–ª–∫–∞ –Ω–∞ –ø–∞–ø–∫—É: {TELEGRAM_FOLDER_LINK}

üìã –í –ø–∞–ø–∫–µ —Å–æ–±—Ä–∞–Ω—ã –≤—Å–µ –∫–∞–Ω–∞–ª—ã GTM:
‚Ä¢ –†–µ–∂—å –º–µ–Ω—è –≤—Å–µ—Ä—å—ë–∑
‚Ä¢ –ß—É—á—É–Ω–¥—Ä–∞
‚Ä¢ naidenka_tattoo
‚Ä¢ Lin++
‚Ä¢ MurderdOll
‚Ä¢ –ü–æ—Ç–µ—Ä—è—à–∫–∞
‚Ä¢ EMI
‚Ä¢ bloodivamp
‚Ä¢ Gothams top model

üé´ –ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –ø–∞–ø–∫—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –±–∏–ª–µ—Ç–æ–≤!"""
        await update.message.reply_text(message)
        
    async def invite_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –¥—Ä—É–∑–µ–π"""
        user = update.effective_user
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥
        referral_code = await self.webapp_handler.get_or_create_referral_code(user.id)
        
        # –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è
        invite_text = self.webapp_handler.get_invite_message(user.first_name, referral_code)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
        await update.message.reply_text(
            invite_text,
            reply_markup=self.webapp_handler.get_invite_keyboard(referral_code),
            parse_mode='HTML'
        )
        
    async def handle_invite_button(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ '–ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–∑–µ–π'"""
        user = update.effective_user
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥
        referral_code = await self.webapp_handler.get_or_create_referral_code(user.id)
        
        # –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è
        invite_text = self.webapp_handler.get_invite_message(user.first_name, referral_code)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text=invite_text,
            reply_markup=self.webapp_handler.get_invite_keyboard(referral_code),
            parse_mode='HTML'
        )
        
    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–º–æ—â—å"""
        help_text = f"""ü§ñ GTM Bot - –ü–æ–º–æ—â—å

üìã –ö–æ–º–∞–Ω–¥—ã:
/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
/check - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª—ã
/tickets - –ü–æ–∫–∞–∑–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∏–ª–µ—Ç–æ–≤
/folder - –°—Å—ã–ª–∫–∞ –Ω–∞ –ø–∞–ø–∫—É GTM
/invite - –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–∑–µ–π
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É

üé´ –ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å –±–∏–ª–µ—Ç—ã:
‚Ä¢ –ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –≤—Å–µ 9 –∫–∞–Ω–∞–ª–æ–≤ GTM (+1 –±–∏–ª–µ—Ç)
‚Ä¢ –ó–∞ –∫–∞–∂–¥–æ–≥–æ –¥—Ä—É–≥–∞ –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ (+1 –±–∏–ª–µ—Ç)

üéÅ –†–æ–∑—ã–≥—Ä—ã—à GTM - –≥–ª–∞–≤–Ω—ã–π –ø—Ä–∏–∑ 20000‚ÇΩ!"""
        await update.message.reply_text(help_text)
        
    async def stats_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)"""
        user = update.effective_user
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º
        if user.id != 6358105675:  # ID –∞–¥–º–∏–Ω–∞
            await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ")
            return
            
        # –ü–æ–ª—É—á–∞–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑ –ë–î
        total_tickets_data = await self.webapp_handler.get_total_tickets_from_db()
        total_tickets = total_tickets_data.get('total_tickets', 0)
        
        stats_text = f"""üé∞ <b>–°–¢–ê–¢–ò–°–¢–ò–ö–ê GTM –ë–û–¢–ê</b>

üé´ –í—Å–µ–≥–æ –±–∏–ª–µ—Ç–æ–≤: {total_tickets}

üìÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ: {datetime.now().strftime('%d.%m.%Y %H:%M')}"""
        
        await update.message.reply_text(stats_text, parse_mode='HTML')
        
    async def handle_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ callback –∫–Ω–æ–ø–æ–∫"""
        query = update.callback_query
        await query.answer()
        
        if query.data == "my_stats":
            user = query.from_user
            stats = await self.webapp_handler.get_user_stats(user.id)
            
            stats_text = f"""üé∞ –¢–≤–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞

üÉè –ü—Ä–æ—Ñ–∏–ª—å:
‚Ä¢ User ID: {user.id}
‚Ä¢ –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –≤—Å–µ –∫–∞–Ω–∞–ª—ã: {'‚úÖ' if stats['subscription_tickets'] > 0 else '‚ùå'}

üé´ –ë–∏–ª–µ—Ç—ã:
‚Ä¢ –í—Å–µ–≥–æ –±–∏–ª–µ—Ç–æ–≤: {stats['total_tickets']}
‚Ä¢ –ó–∞ –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –∫–∞–Ω–∞–ª—ã: {stats['subscription_tickets']}/1
‚Ä¢ –ó–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω—ã—Ö –¥—Ä—É–∑–µ–π: {stats['referral_tickets']}

üé∞ –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:
<code>https://t.me/GTM_ROBOT?start={stats['referral_code']}</code>"""
            
            await query.edit_message_text(stats_text, parse_mode='HTML')
        
    async def save_user(self, user):
        """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î"""
        try:
            conn = psycopg2.connect(DATABASE_URL)
            cursor = conn.cursor()
            
            cursor.execute("""
                INSERT INTO users (telegram_id, username, first_name, last_name)
                VALUES (%s, %s, %s, %s)
                ON CONFLICT (telegram_id) 
                DO UPDATE SET 
                    username = EXCLUDED.username,
                    first_name = EXCLUDED.first_name,
                    last_name = EXCLUDED.last_name
            """, (user.id, user.username, user.first_name, user.last_name))
            
            conn.commit()
            cursor.close()
            conn.close()
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
            
    async def add_subscription_ticket(self, user_id: int):
        """–î–æ–±–∞–≤–∏—Ç—å –±–∏–ª–µ—Ç –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –≤—Å–µ –∫–∞–Ω–∞–ª—ã"""
        try:
            conn = psycopg2.connect(DATABASE_URL)
            cursor = conn.cursor()
            
            # –î–æ–±–∞–≤–ª—è–µ–º –±–∏–ª–µ—Ç
            cursor.execute("""
                UPDATE users 
                SET tickets_count = tickets_count + 1
                WHERE telegram_id = %s
            """, (user_id,))
            
            # –û—Ç–º–µ—á–∞–µ–º, —á—Ç–æ –±–∏–ª–µ—Ç –∑–∞ –ø–æ–¥–ø–∏—Å–∫–∏ —É–∂–µ –Ω–∞—á–∏—Å–ª–µ–Ω
            cursor.execute("""
                UPDATE users 
                SET has_subscription_ticket = TRUE
                WHERE telegram_id = %s
            """, (user_id,))
            
            conn.commit()
            cursor.close()
            conn.close()
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –±–∏–ª–µ—Ç–∞ –∑–∞ –ø–æ–¥–ø–∏—Å–∫–∏: {e}")
            
    async def has_subscription_ticket(self, user_id: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –Ω–∞—á–∏—Å–ª—è–ª–∏ –ª–∏ —É–∂–µ –±–∏–ª–µ—Ç –∑–∞ –ø–æ–¥–ø–∏—Å–∫–∏"""
        try:
            conn = psycopg2.connect(DATABASE_URL)
            cursor = conn.cursor()
            
            cursor.execute("""
                SELECT has_subscription_ticket FROM users WHERE telegram_id = %s
            """, (user_id,))
            
            result = cursor.fetchone()
            cursor.close()
            conn.close()
            
            return result[0] if result else False
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∏–ª–µ—Ç–∞ –∑–∞ –ø–æ–¥–ø–∏—Å–∫–∏: {e}")
            return False
            
    async def is_new_user(self, user_id: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –Ω–æ–≤—ã–π –ª–∏ —ç—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"""
        try:
            conn = psycopg2.connect(DATABASE_URL)
            cursor = conn.cursor()
            
            cursor.execute("""
                SELECT created_at FROM users WHERE telegram_id = %s
            """, (user_id,))
            
            result = cursor.fetchone()
            cursor.close()
            conn.close()
            
            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å—á–∏—Ç–∞–µ–º –µ–≥–æ –Ω–æ–≤—ã–º
            return result is None
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
            return False
            

            
    async def get_user_tickets(self, user_id: int) -> int:
        """–ü–æ–ª—É—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∏–ª–µ—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            conn = psycopg2.connect(DATABASE_URL)
            cursor = conn.cursor()
            
            cursor.execute("""
                SELECT tickets_count FROM users WHERE telegram_id = %s
            """, (user_id,))
            
            result = cursor.fetchone()
            cursor.close()
            conn.close()
            
            return result[0] if result else 0
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∏–ª–µ—Ç–æ–≤: {e}")
            return 0
            
    async def get_total_tickets(self) -> int:
        """–ü–æ–ª—É—á–∏—Ç—å –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∏–ª–µ—Ç–æ–≤"""
        try:
            conn = psycopg2.connect(DATABASE_URL)
            cursor = conn.cursor()
            
            cursor.execute("""
                SELECT SUM(tickets_count) FROM users
            """)
            
            result = cursor.fetchone()
            cursor.close()
            conn.close()
            
            return result[0] if result and result[0] else 0
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –±–∏–ª–µ—Ç–æ–≤: {e}")
            return 0
            
    def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ GTM Bot...")
        self.application.run_polling()

if __name__ == "__main__":
    bot = GTMBot()
    bot.run() 