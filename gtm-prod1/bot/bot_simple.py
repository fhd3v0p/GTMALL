#!/usr/bin/env python3
"""
GTM Simple Bot –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
–£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –±–µ–∑ —Å–ª–æ–∂–Ω—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
"""

import os
import logging
import asyncio
import random
import string
from datetime import datetime
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
TELEGRAM_BOT_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
SUPABASE_URL = os.getenv('SUPABASE_URL')
SUPABASE_ANON_KEY = os.getenv('SUPABASE_ANON_KEY')
SUPABASE_SERVICE_ROLE_KEY = os.getenv('SUPABASE_SERVICE_ROLE_KEY')

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
if not all([TELEGRAM_BOT_TOKEN, SUPABASE_URL, SUPABASE_ANON_KEY, SUPABASE_SERVICE_ROLE_KEY]):
    print("‚ùå –ù–µ –≤—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã!")
    print("üìù –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª .env")
    exit(1)

# –ò–º–ø–æ—Ä—Ç telegram —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
try:
    from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, WebAppInfo
    from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes, CallbackQueryHandler
    TELEGRAM_AVAILABLE = True
except ImportError:
    print("‚ö†Ô∏è python-telegram-bot –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    print("üì¶ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install python-telegram-bot")
    TELEGRAM_AVAILABLE = False

# –ò–º–ø–æ—Ä—Ç requests –¥–ª—è Supabase
try:
    import requests
    REQUESTS_AVAILABLE = True
except ImportError:
    print("‚ö†Ô∏è requests –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    print("üì¶ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install requests")
    REQUESTS_AVAILABLE = False

class SimpleSupabaseClient:
    """–£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –∫–ª–∏–µ–Ω—Ç –¥–ª—è Supabase"""
    
    def __init__(self):
        self.base_url = SUPABASE_URL
        self.service_key = SUPABASE_SERVICE_ROLE_KEY
        self.headers = {
            'apikey': self.service_key,
            'Authorization': f'Bearer {self.service_key}',
            'Content-Type': 'application/json'
        }
    
    def create_user(self, user_data):
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            response = requests.post(
                f"{self.base_url}/rest/v1/users",
                headers=self.headers,
                json=user_data
            )
            return response.status_code == 201
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
            return False
    
    def get_user(self, telegram_id):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            response = requests.get(
                f"{self.base_url}/rest/v1/users?telegram_id=eq.{telegram_id}",
                headers=self.headers
            )
            if response.status_code == 200:
                data = response.json()
                return data[0] if data else None
            return None
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
            return None
    
    def update_user(self, telegram_id, user_data):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            response = requests.patch(
                f"{self.base_url}/rest/v1/users?telegram_id=eq.{telegram_id}",
                headers=self.headers,
                json=user_data
            )
            return response.status_code == 200
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
            return False
    
    def add_user_ticket(self, telegram_id):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –±–∏–ª–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
        user = self.get_user(telegram_id)
        if user:
            new_tickets = user.get('tickets_count', 0) + 1
            return self.update_user(telegram_id, {'tickets_count': new_tickets})
        return False
    
    def get_user_tickets(self, telegram_id):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –±–∏–ª–µ—Ç–æ–≤"""
        user = self.get_user(telegram_id)
        return user.get('tickets_count', 0) if user else 0

class SimpleGTMBot:
    """–£–ø—Ä–æ—â–µ–Ω–Ω—ã–π GTM –±–æ—Ç"""
    
    def __init__(self):
        if not TELEGRAM_AVAILABLE:
            print("‚ùå Telegram –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
            return
        
        self.application = Application.builder().token(TELEGRAM_BOT_TOKEN).build()
        self.supabase = SimpleSupabaseClient()
        self.setup_handlers()
        
    def setup_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥"""
        self.application.add_handler(CommandHandler("start", self.start_command))
        self.application.add_handler(CommandHandler("tickets", self.show_tickets))
        self.application.add_handler(CommandHandler("test", self.test_command))
        self.application.add_handler(CommandHandler("help", self.help_command))
        
    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        user = update.effective_user
        
        welcome_message = f"""‚ò†Ô∏è –ü—Ä–∏–≤–µ—Ç, {user.first_name}! ‚ò†Ô∏è

üëÑ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤–æ Gotham's Top Model!

–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–∞—è –≤–µ—Ä—Å–∏—è –±–æ—Ç–∞ —Å Supabase –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π.

–ö–æ–º–∞–Ω–¥—ã:
/tickets - –ü–æ–∫–∞–∑–∞—Ç—å –±–∏–ª–µ—Ç—ã
/test - –¢–µ—Å—Ç Supabase
/help - –ü–æ–º–æ—â—å"""
        
        await update.message.reply_text(welcome_message)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Supabase
        user_data = {
            'telegram_id': user.id,
            'username': user.username,
            'first_name': user.first_name,
            'last_name': user.last_name,
            'tickets_count': 0,
            'has_subscription_ticket': False
        }
        
        if self.supabase.create_user(user_data):
            await update.message.reply_text("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ Supabase")
        else:
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ Supabase")
    
    async def show_tickets(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∏–ª–µ—Ç–æ–≤"""
        user = update.effective_user
        tickets = self.supabase.get_user_tickets(user.id)
        
        message = f"""üé´ –ë–∏–ª–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.first_name}

üìä –í–∞—à–∏ –±–∏–ª–µ—Ç—ã: {tickets}

üéÅ –£—á–∞—Å—Ç–≤—É–π—Ç–µ –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ GTM!"""
        await update.message.reply_text(message)
    
    async def test_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–¢–µ—Å—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞"""
        user = update.effective_user
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –±–∏–ª–µ—Ç
        if self.supabase.add_user_ticket(user.id):
            await update.message.reply_text("‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π –±–∏–ª–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω!")
        else:
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –±–∏–ª–µ—Ç–∞")
    
    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–º–æ—â—å"""
        help_text = """ü§ñ GTM Simple Bot - –ü–æ–º–æ—â—å

üìã –ö–æ–º–∞–Ω–¥—ã:
/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
/tickets - –ü–æ–∫–∞–∑–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∏–ª–µ—Ç–æ–≤
/test - –î–æ–±–∞–≤–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π –±–∏–ª–µ—Ç
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É

üé´ –≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–∞—è –≤–µ—Ä—Å–∏—è —Å Supabase –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π!"""
        await update.message.reply_text(help_text)
    
    def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        if not TELEGRAM_AVAILABLE:
            print("‚ùå Telegram –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
            return
        
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ GTM Simple Bot...")
        self.application.run_polling()

def test_supabase_connection():
    """–¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Supabase"""
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Supabase –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è...")
    
    try:
        response = requests.get(f"{SUPABASE_URL}/rest/v1/", headers={
            'apikey': SUPABASE_ANON_KEY,
            'Authorization': f'Bearer {SUPABASE_ANON_KEY}'
        })
        
        if response.status_code == 200:
            print("‚úÖ Supabase –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ")
            return True
        else:
            print(f"‚ùå Supabase –æ—à–∏–±–∫–∞: {response.status_code}")
            return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Supabase: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ GTM Simple Bot")
    print("=================")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
    if not REQUESTS_AVAILABLE:
        print("‚ùå requests –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        return
    
    # –¢–µ—Å—Ç Supabase
    if not test_supabase_connection():
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Supabase")
        return
    
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    if TELEGRAM_AVAILABLE:
        bot = SimpleGTMBot()
        bot.run()
    else:
        print("‚ùå Telegram –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
        print("üì¶ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install python-telegram-bot")

if __name__ == "__main__":
    main() 