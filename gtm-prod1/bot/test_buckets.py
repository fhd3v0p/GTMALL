#!/usr/bin/env python3
"""
GTM Supabase Bucket Test
–î–µ—Ç–∞–ª—å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞–∫–µ—Ç–æ–≤ Supabase Storage
"""
import os
import requests
import json
from dotenv import load_dotenv

load_dotenv()

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
SUPABASE_URL = os.getenv('SUPABASE_URL')
SUPABASE_ANON_KEY = os.getenv('SUPABASE_ANON_KEY')
SUPABASE_SERVICE_ROLE_KEY = os.getenv('SUPABASE_SERVICE_ROLE_KEY')
SUPABASE_STORAGE_BUCKET = os.getenv('SUPABASE_STORAGE_BUCKET', 'gtm-assets')

def test_supabase_buckets():
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Supabase Storage Buckets...")
    print(f"URL: {SUPABASE_URL}")
    print(f"Bucket: {SUPABASE_STORAGE_BUCKET}")
    
    # Headers –¥–ª—è service role (–Ω—É–∂–µ–Ω –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è storage)
    service_headers = {
        'apikey': SUPABASE_SERVICE_ROLE_KEY,
        'Authorization': f'Bearer {SUPABASE_SERVICE_ROLE_KEY}',
        'Content-Type': 'application/json'
    }
    
    # Headers –¥–ª—è anon key (–¥–ª—è –ø—É–±–ª–∏—á–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞)
    anon_headers = {
        'apikey': SUPABASE_ANON_KEY,
        'Authorization': f'Bearer {SUPABASE_ANON_KEY}',
        'Content-Type': 'application/json'
    }
    
    # –¢–µ—Å—Ç 1: –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –±–∞–∫–µ—Ç–æ–≤
    print("\nüì¶ –¢–µ—Å—Ç 1: –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –±–∞–∫–µ—Ç–æ–≤")
    try:
        response = requests.get(f'{SUPABASE_URL}/storage/v1/bucket/list', headers=service_headers)
        print(f"Status: {response.status_code}")
        if response.status_code == 200:
            buckets = response.json()
            print(f"–ù–∞–π–¥–µ–Ω–æ –±–∞–∫–µ—Ç–æ–≤: {len(buckets)}")
            for bucket in buckets:
                print(f"  - {bucket.get('name')} (public: {bucket.get('public')})")
        else:
            print(f"Response: {response.text[:200]}...")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    
    # –¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –±–∞–∫–µ—Ç–∞
    print(f"\nüîç –¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∫–µ—Ç–∞ '{SUPABASE_STORAGE_BUCKET}'")
    try:
        response = requests.get(f'{SUPABASE_URL}/storage/v1/bucket/{SUPABASE_STORAGE_BUCKET}', headers=service_headers)
        print(f"Status: {response.status_code}")
        if response.status_code == 200:
            bucket_info = response.json()
            print(f"‚úÖ –ë–∞–∫–µ—Ç –Ω–∞–π–¥–µ–Ω: {bucket_info.get('name')}")
            print(f"  Public: {bucket_info.get('public')}")
            print(f"  Created: {bucket_info.get('created_at')}")
        else:
            print(f"Response: {response.text[:200]}...")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    
    # –¢–µ—Å—Ç 3: –°–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –≤ –±–∞–∫–µ—Ç–µ
    print(f"\nüìÅ –¢–µ—Å—Ç 3: –°–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –≤ –±–∞–∫–µ—Ç–µ '{SUPABASE_STORAGE_BUCKET}'")
    try:
        response = requests.get(f'{SUPABASE_URL}/storage/v1/object/list/{SUPABASE_STORAGE_BUCKET}', headers=service_headers)
        print(f"Status: {response.status_code}")
        if response.status_code == 200:
            files = response.json()
            print(f"–ù–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {len(files)}")
            for file in files[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5 —Ñ–∞–π–ª–æ–≤
                print(f"  - {file.get('name')} ({file.get('size')} bytes)")
        else:
            print(f"Response: {response.text[:200]}...")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    
    # –¢–µ—Å—Ç 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—É–±–ª–∏—á–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ–∞–π–ª—É
    print(f"\nüåê –¢–µ—Å—Ç 4: –ü—É–±–ª–∏—á–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ —Ñ–∞–π–ª—É")
    try:
        # –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å URL —Ñ–∞–π–ª–∞
        test_file_url = f'{SUPABASE_URL}/storage/v1/object/public/{SUPABASE_STORAGE_BUCKET}/banners/city_selection_banner.png'
        print(f"–¢–µ—Å—Ç–∏—Ä—É–µ–º URL: {test_file_url}")
        
        response = requests.get(test_file_url, headers=anon_headers)
        print(f"Status: {response.status_code}")
        if response.status_code == 200:
            print("‚úÖ –§–∞–π–ª –¥–æ—Å—Ç—É–ø–µ–Ω –ø—É–±–ª–∏—á–Ω–æ")
        else:
            print(f"‚ùå –§–∞–π–ª –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {response.text[:100]}...")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    
    # –¢–µ—Å—Ç 5: –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞ (–µ—Å–ª–∏ –±–∞–∫–µ—Ç —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)
    print(f"\nüìù –¢–µ—Å—Ç 5: –ü–æ–ø—ã—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞")
    try:
        test_content = "This is a test file for GTM project"
        files = {'file': ('test.txt', test_content, 'text/plain')}
        
        response = requests.post(
            f'{SUPABASE_URL}/storage/v1/object/{SUPABASE_STORAGE_BUCKET}/test.txt',
            headers=service_headers,
            files=files
        )
        print(f"Status: {response.status_code}")
        if response.status_code == 200:
            print("‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω")
        else:
            print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ñ–∞–π–ª: {response.text[:200]}...")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    test_supabase_buckets() 