#!/usr/bin/env python3
"""
GTM Supabase Bucket Setup
–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–∞–∫–µ—Ç–∞ –∫–∞–∫ –ø—É–±–ª–∏—á–Ω–æ–≥–æ –≤ Supabase Storage
"""
import os
import requests
import json
from dotenv import load_dotenv

load_dotenv()

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
SUPABASE_URL = os.getenv('SUPABASE_URL')
SUPABASE_SERVICE_ROLE_KEY = os.getenv('SUPABASE_SERVICE_ROLE_KEY')
SUPABASE_STORAGE_BUCKET = os.getenv('SUPABASE_STORAGE_BUCKET', 'gtm-assets')

def setup_public_bucket():
    print("üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—É–±–ª–∏—á–Ω–æ–≥–æ –±–∞–∫–µ—Ç–∞ –≤ Supabase...")
    print(f"URL: {SUPABASE_URL}")
    print(f"Bucket: {SUPABASE_STORAGE_BUCKET}")
    
    # Headers –¥–ª—è service role (–Ω—É–∂–µ–Ω –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è storage)
    service_headers = {
        'apikey': SUPABASE_SERVICE_ROLE_KEY,
        'Authorization': f'Bearer {SUPABASE_SERVICE_ROLE_KEY}',
        'Content-Type': 'application/json'
    }
    
    # –®–∞–≥ 1: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±–∞–∫–µ—Ç–∞
    print(f"\nüìã –®–∞–≥ 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –±–∞–∫–µ—Ç–∞ '{SUPABASE_STORAGE_BUCKET}'")
    try:
        response = requests.get(f'{SUPABASE_URL}/storage/v1/bucket/{SUPABASE_STORAGE_BUCKET}', headers=service_headers)
        print(f"Status: {response.status_code}")
        if response.status_code == 200:
            bucket_info = response.json()
            print(f"‚úÖ –ë–∞–∫–µ—Ç –Ω–∞–π–¥–µ–Ω: {bucket_info.get('name')}")
            print(f"  Public: {bucket_info.get('public')}")
            print(f"  Created: {bucket_info.get('created_at')}")
            
            if bucket_info.get('public'):
                print("‚úÖ –ë–∞–∫–µ—Ç —É–∂–µ –ø—É–±–ª–∏—á–Ω—ã–π!")
                return True
            else:
                print("‚ùå –ë–∞–∫–µ—Ç –Ω–µ –ø—É–±–ª–∏—á–Ω—ã–π, –Ω—É–∂–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å...")
        else:
            print(f"‚ùå –ë–∞–∫–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω: {response.text[:200]}...")
            return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return False
    
    # –®–∞–≥ 2: –î–µ–ª–∞–µ–º –±–∞–∫–µ—Ç –ø—É–±–ª–∏—á–Ω—ã–º
    print(f"\nüîì –®–∞–≥ 2: –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–∞–∫–µ—Ç–∞ –∫–∞–∫ –ø—É–±–ª–∏—á–Ω–æ–≥–æ")
    try:
        update_data = {
            'public': True
        }
        
        response = requests.patch(
            f'{SUPABASE_URL}/storage/v1/bucket/{SUPABASE_STORAGE_BUCKET}',
            headers=service_headers,
            json=update_data
        )
        print(f"Status: {response.status_code}")
        if response.status_code == 200:
            print("‚úÖ –ë–∞–∫–µ—Ç —É—Å–ø–µ—à–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –∫–∞–∫ –ø—É–±–ª–∏—á–Ω—ã–π!")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏: {response.text[:200]}...")
            return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return False
    
    # –®–∞–≥ 3: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    print(f"\n‚úÖ –®–∞–≥ 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞")
    try:
        response = requests.get(f'{SUPABASE_URL}/storage/v1/bucket/{SUPABASE_STORAGE_BUCKET}', headers=service_headers)
        if response.status_code == 200:
            bucket_info = response.json()
            print(f"‚úÖ –ë–∞–∫–µ—Ç: {bucket_info.get('name')}")
            print(f"‚úÖ Public: {bucket_info.get('public')}")
            if bucket_info.get('public'):
                print("üéâ –ë–∞–∫–µ—Ç —É—Å–ø–µ—à–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –∫–∞–∫ –ø—É–±–ª–∏—á–Ω—ã–π!")
                return True
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏: {response.text[:200]}...")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    
    return False

def test_public_access():
    """–¢–µ—Å—Ç –ø—É–±–ª–∏—á–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ–∞–π–ª–∞–º"""
    print(f"\nüåê –¢–µ—Å—Ç –ø—É–±–ª–∏—á–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ–∞–π–ª–∞–º")
    
    # Headers –¥–ª—è anon key (–¥–ª—è –ø—É–±–ª–∏—á–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞)
    anon_headers = {
        'apikey': os.getenv('SUPABASE_ANON_KEY'),
        'Authorization': f'Bearer {os.getenv("SUPABASE_ANON_KEY")}',
        'Content-Type': 'application/json'
    }
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –¥–æ—Å—Ç—É–ø –∫ —Ç–µ—Å—Ç–æ–≤–æ–º—É —Ñ–∞–π–ª—É
    test_file_url = f'{SUPABASE_URL}/storage/v1/object/public/{SUPABASE_STORAGE_BUCKET}/test.txt'
    print(f"–¢–µ—Å—Ç–∏—Ä—É–µ–º URL: {test_file_url}")
    
    try:
        response = requests.get(test_file_url, headers=anon_headers)
        print(f"Status: {response.status_code}")
        if response.status_code == 200:
            print("‚úÖ –§–∞–π–ª –¥–æ—Å—Ç—É–ø–µ–Ω –ø—É–±–ª–∏—á–Ω–æ!")
            return True
        else:
            print(f"‚ùå –§–∞–π–ª –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {response.text[:100]}...")
            return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return False

if __name__ == "__main__":
    print("üöÄ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—É–±–ª–∏—á–Ω–æ–≥–æ –±–∞–∫–µ—Ç–∞ Supabase")
    print("=" * 50)
    
    if setup_public_bucket():
        print("\n‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
        test_public_access()
    else:
        print("\n‚ùå –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å!") 