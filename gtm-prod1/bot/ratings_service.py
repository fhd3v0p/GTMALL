#!/usr/bin/env python3
"""
–°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ä–µ–π—Ç–∏–Ω–≥–∞–º–∏ –∞—Ä—Ç–∏—Å—Ç–æ–≤ –≤ Supabase
"""

import requests
import json
from typing import Optional, Dict, Any

# Supabase –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
SUPABASE_URL = "https://rxmtovqxjsvogyywyrha.supabase.co"
SUPABASE_ANON_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InJ4bXRvdnF4anN2b2d5eXd5cmhhIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTQ1Mjg1NTAsImV4cCI6MjA3MDEwNDU1MH0.gDkJybktFoi486hbIVwppDfmVQlAR0fM4o4Sl1-AxhE"

class RatingsService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ä–µ–π—Ç–∏–Ω–≥–∞–º–∏"""
    
    def __init__(self):
        self.base_url = SUPABASE_URL
        self.headers = {
            'apikey': SUPABASE_ANON_KEY,
            'Authorization': f'Bearer {SUPABASE_ANON_KEY}',
            'Content-Type': 'application/json',
        }
    
    def add_or_update_rating(self, artist_name: str, user_id: str, rating: int, comment: str = None) -> Dict[str, Any]:
        """
        –î–æ–±–∞–≤–ª—è–µ—Ç –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –æ—Ü–µ–Ω–∫—É –∞—Ä—Ç–∏—Å—Ç–∞
        
        Args:
            artist_name: –ò–º—è –∞—Ä—Ç–∏—Å—Ç–∞
            user_id: Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è  
            rating: –û—Ü–µ–Ω–∫–∞ –æ—Ç 1 –¥–æ 5
            comment: –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        
        Returns:
            –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏
        """
        try:
            # –°–Ω–∞—á–∞–ª–∞ –Ω–∞–π–¥–µ–º ID –∞—Ä—Ç–∏—Å—Ç–∞ –ø–æ –∏–º–µ–Ω–∏
            artist_id = self._get_artist_id_by_name(artist_name)
            if not artist_id:
                return {
                    'success': False,
                    'error': f'–ê—Ä—Ç–∏—Å—Ç {artist_name} –Ω–µ –Ω–∞–π–¥–µ–Ω'
                }
            
            # –í—ã–∑—ã–≤–∞–µ–º RPC —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è/–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ü–µ–Ω–∫–∏
            url = f"{self.base_url}/rest/v1/rpc/add_or_update_rating"
            
            payload = {
                'artist_id_param': artist_id,
                'user_id_param': str(user_id),
                'rating_param': rating,
                'comment_param': comment
            }
            
            response = requests.post(url, json=payload, headers=self.headers)
            
            if response.status_code == 200:
                result = response.json()
                print(f"‚úÖ –†–µ–π—Ç–∏–Ω–≥ –¥–æ–±–∞–≤–ª–µ–Ω/–æ–±–Ω–æ–≤–ª–µ–Ω –¥–ª—è {artist_name}: {rating}/5")
                return result
            else:
                error_msg = f"–û—à–∏–±–∫–∞ API: {response.status_code} - {response.text}"
                print(f"‚ùå {error_msg}")
                return {
                    'success': False,
                    'error': error_msg
                }
                
        except Exception as e:
            error_msg = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ä–µ–π—Ç–∏–Ω–≥–∞: {str(e)}"
            print(f"‚ùå {error_msg}")
            return {
                'success': False,
                'error': error_msg
            }
    
    def get_artist_ratings(self, artist_name: str) -> Dict[str, Any]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç —Ä–µ–π—Ç–∏–Ω–≥–∏ –∞—Ä—Ç–∏—Å—Ç–∞
        
        Args:
            artist_name: –ò–º—è –∞—Ä—Ç–∏—Å—Ç–∞
        
        Returns:
            –î–∞–Ω–Ω—ã–µ –æ —Ä–µ–π—Ç–∏–Ω–≥–∞—Ö
        """
        try:
            # –ù–∞–π–¥–µ–º ID –∞—Ä—Ç–∏—Å—Ç–∞ –ø–æ –∏–º–µ–Ω–∏
            artist_id = self._get_artist_id_by_name(artist_name)
            if not artist_id:
                return {
                    'success': False,
                    'error': f'–ê—Ä—Ç–∏—Å—Ç {artist_name} –Ω–µ –Ω–∞–π–¥–µ–Ω'
                }
            
            # –í—ã–∑—ã–≤–∞–µ–º RPC —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–π—Ç–∏–Ω–≥–æ–≤
            url = f"{self.base_url}/rest/v1/rpc/get_artist_ratings"
            
            payload = {
                'artist_id_param': artist_id
            }
            
            response = requests.post(url, json=payload, headers=self.headers)
            
            if response.status_code == 200:
                result = response.json()
                print(f"üìä –†–µ–π—Ç–∏–Ω–≥ {artist_name}: {result.get('average_rating', 0)}/5 ({result.get('total_ratings', 0)} –æ—Ü–µ–Ω–æ–∫)")
                return {
                    'success': True,
                    'data': result
                }
            else:
                error_msg = f"–û—à–∏–±–∫–∞ API: {response.status_code} - {response.text}"
                print(f"‚ùå {error_msg}")
                return {
                    'success': False,
                    'error': error_msg
                }
                
        except Exception as e:
            error_msg = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–µ–π—Ç–∏–Ω–≥–æ–≤: {str(e)}"
            print(f"‚ùå {error_msg}")
            return {
                'success': False,
                'error': error_msg
            }
    
    def _get_artist_id_by_name(self, artist_name: str) -> Optional[int]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç ID –∞—Ä—Ç–∏—Å—Ç–∞ –ø–æ –∏–º–µ–Ω–∏
        
        Args:
            artist_name: –ò–º—è –∞—Ä—Ç–∏—Å—Ç–∞
        
        Returns:
            ID –∞—Ä—Ç–∏—Å—Ç–∞ –∏–ª–∏ None –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω
        """
        try:
            url = f"{self.base_url}/rest/v1/artists?select=id&name=eq.{artist_name}"
            
            response = requests.get(url, headers=self.headers)
            
            if response.status_code == 200:
                data = response.json()
                if data and len(data) > 0:
                    return data[0]['id']
            
            return None
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∞—Ä—Ç–∏—Å—Ç–∞ {artist_name}: {str(e)}")
            return None
    
    def get_top_rated_artists(self, limit: int = 10) -> Dict[str, Any]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç —Ç–æ–ø –∞—Ä—Ç–∏—Å—Ç–æ–≤ –ø–æ —Ä–µ–π—Ç–∏–Ω–≥—É
        
        Args:
            limit: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞—Ä—Ç–∏—Å—Ç–æ–≤
        
        Returns:
            –°–ø–∏—Å–æ–∫ —Ç–æ–ø –∞—Ä—Ç–∏—Å—Ç–æ–≤
        """
        try:
            url = f"{self.base_url}/rest/v1/artists?select=name,average_rating,total_ratings&order=average_rating.desc,total_ratings.desc&limit={limit}"
            
            response = requests.get(url, headers=self.headers)
            
            if response.status_code == 200:
                artists = response.json()
                print(f"üèÜ –¢–æ–ø {len(artists)} –∞—Ä—Ç–∏—Å—Ç–æ–≤ –ø–æ —Ä–µ–π—Ç–∏–Ω–≥—É:")
                for i, artist in enumerate(artists, 1):
                    print(f"  {i}. {artist['name']} - {artist['average_rating']}/5 ({artist['total_ratings']} –æ—Ü–µ–Ω–æ–∫)")
                
                return {
                    'success': True,
                    'data': artists
                }
            else:
                error_msg = f"–û—à–∏–±–∫–∞ API: {response.status_code} - {response.text}"
                print(f"‚ùå {error_msg}")
                return {
                    'success': False,
                    'error': error_msg
                }
                
        except Exception as e:
            error_msg = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–æ–ø–∞: {str(e)}"
            print(f"‚ùå {error_msg}")
            return {
                'success': False,
                'error': error_msg
            }

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –≤ –±–æ—Ç–∞
def handle_rating_command(user_id: str, artist_name: str, rating: int, comment: str = None) -> str:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –æ—Ü–µ–Ω–∫–∏ –¥–ª—è –±–æ—Ç–∞
    
    Args:
        user_id: Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        artist_name: –ò–º—è –∞—Ä—Ç–∏—Å—Ç–∞
        rating: –û—Ü–µ–Ω–∫–∞ –æ—Ç 1 –¥–æ 5
        comment: –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
    
    Returns:
        –¢–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    service = RatingsService()
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è —Ä–µ–π—Ç–∏–Ω–≥–∞
    if not 1 <= rating <= 5:
        return "‚ùå –û—Ü–µ–Ω–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç 1 –¥–æ 5 –∑–≤–µ–∑–¥"
    
    # –î–æ–±–∞–≤–ª—è–µ–º/–æ–±–Ω–æ–≤–ª—è–µ–º –æ—Ü–µ–Ω–∫—É
    result = service.add_or_update_rating(artist_name, user_id, rating, comment)
    
    if result.get('success'):
        action = result.get('action', 'unknown')
        if action == 'created':
            response = f"‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ü–µ–Ω–∫—É! –í—ã –ø–æ—Å—Ç–∞–≤–∏–ª–∏ {rating}‚≠ê –∞—Ä—Ç–∏—Å—Ç—É {artist_name}"
        else:
            prev_rating = result.get('previous_rating', 0)
            response = f"‚úÖ –û—Ü–µ–Ω–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞! –ë—ã–ª–æ {prev_rating}‚≠ê, —Å—Ç–∞–ª–æ {rating}‚≠ê –¥–ª—è {artist_name}"
        
        if comment:
            response += f"\n–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {comment}"
        
        # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        ratings_data = service.get_artist_ratings(artist_name)
        if ratings_data.get('success'):
            data = ratings_data['data']
            avg_rating = data.get('average_rating', 0)
            total_ratings = data.get('total_ratings', 0)
            response += f"\n\nüìä –¢–µ–∫—É—â–∏–π —Ä–µ–π—Ç–∏–Ω–≥ {artist_name}: {avg_rating:.1f}‚≠ê ({total_ratings} –æ—Ü–µ–Ω–æ–∫)"
        
        return response
    else:
        error = result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')
        return f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –æ—Ü–µ–Ω–∫—É: {error}"

# –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
if __name__ == "__main__":
    service = RatingsService()
    
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã —Ä–µ–π—Ç–∏–Ω–≥–æ–≤...")
    
    # –¢–µ—Å—Ç 1: –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Ü–µ–Ω–∫–∏
    print("\n1. –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Ü–µ–Ω–∫–∏ –¥–ª—è –ß—É—á—É–Ω–¥—Ä–∞...")
    result1 = service.add_or_update_rating("–ß—É—á—É–Ω–¥—Ä–∞", "123456789", 5, "–û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞!")
    print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {result1}")
    
    # –¢–µ—Å—Ç 2: –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–π—Ç–∏–Ω–≥–æ–≤
    print("\n2. –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–π—Ç–∏–Ω–≥–æ–≤ –ß—É—á—É–Ω–¥—Ä–∞...")
    result2 = service.get_artist_ratings("–ß—É—á—É–Ω–¥—Ä–∞")
    print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {result2}")
    
    # –¢–µ—Å—Ç 3: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ü–µ–Ω–∫–∏
    print("\n3. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ü–µ–Ω–∫–∏ –¥–ª—è –ß—É—á—É–Ω–¥—Ä–∞...")
    result3 = service.add_or_update_rating("–ß—É—á—É–Ω–¥—Ä–∞", "123456789", 4, "–•–æ—Ä–æ—à–æ, –Ω–æ –º–æ–∂–Ω–æ –ª—É—á—à–µ")
    print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {result3}")
    
    # –¢–µ—Å—Ç 4: –¢–æ–ø –∞—Ä—Ç–∏—Å—Ç–æ–≤
    print("\n4. –¢–æ–ø –∞—Ä—Ç–∏—Å—Ç–æ–≤...")
    result4 = service.get_top_rated_artists(5)
    print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {result4}")
    
    print("\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")