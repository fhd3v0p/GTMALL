#!/usr/bin/env python3
"""
–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏–∑ MasterCloud
"""

import requests
import json

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
SUPABASE_URL = "https://rxmtovqxjsvogyywyrha.supabase.co"
SUPABASE_ANON_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InJ4bXRvdnF4anN2b2d5eXd5cmhhIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTQ1Mjg1NTAsImV4cCI6MjA3MDEwNDU1MH0.gDkJybktFoi486hbIVwppDfmVQlAR0fM4o4Sl1-AxhE"

headers = {
    'apikey': SUPABASE_ANON_KEY,
    'Authorization': f'Bearer {SUPABASE_ANON_KEY}',
    'Content-Type': 'application/json',
    'Prefer': 'return=representation'
}

def add_missing_categories():
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π"""
    print("‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π...")
    
    # –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑ MasterCloud
    master_cloud_categories = [
        # –¢–æ–≤–∞—Ä—ã (product)
        {'name': 'GTM BRAND', 'description': '–ë—Ä–µ–Ω–¥–æ–≤—ã–µ —Ç–æ–≤–∞—Ä—ã GTM', 'type': 'product'},
        {'name': 'Custom', 'description': '–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ –∑–∞–∫–∞–∑—ã', 'type': 'product'},
        {'name': 'Second', 'description': '–í—Ç–æ—Ä—ã–µ —Ä—É–∫–∏', 'type': 'product'},
        
        # –£—Å–ª—É–≥–∏ (service) - –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ —É–∂–µ –µ—Å—Ç—å, –Ω–æ –ø—Ä–æ–≤–µ—Ä–∏–º
        {'name': 'Hair', 'description': '–ü–∞—Ä–∏–∫–º–∞—Ö–µ—Ä—Å–∫–∏–µ —É—Å–ª—É–≥–∏', 'type': 'service'},
    ]
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    response = requests.get(
        f"{SUPABASE_URL}/rest/v1/categories?select=name",
        headers=headers
    )
    
    if response.status_code != 200:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π: {response.status_code}")
        return False
    
    existing_categories = [cat['name'] for cat in response.json()]
    print(f"üìã –°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {existing_categories}")
    
    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    added_count = 0
    for category in master_cloud_categories:
        if category['name'] not in existing_categories:
            print(f"‚ûï –î–æ–±–∞–≤–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é: {category['name']} ({category['type']})")
            
            category_data = {
                "name": category['name'],
                "description": category['description'],
                "type": category['type']
            }
            
            response = requests.post(
                f"{SUPABASE_URL}/rest/v1/categories",
                headers=headers,
                json=category_data
            )
            
            if response.status_code in [200, 201]:
                print(f"  ‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è {category['name']} –¥–æ–±–∞–≤–ª–µ–Ω–∞")
                added_count += 1
            else:
                print(f"  ‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {category['name']}: {response.status_code}")
        else:
            print(f"‚úì –ö–∞—Ç–µ–≥–æ—Ä–∏—è {category['name']} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
    
    print(f"\nüìä –î–æ–±–∞–≤–ª–µ–Ω–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: {added_count}")
    return True

def assign_gtm_brand_category():
    """–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ GTM BRAND –¥–ª—è –∞—Ä—Ç–∏—Å—Ç–∞ GTM (ID 14)"""
    print("\nüè∑Ô∏è –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ GTM BRAND –¥–ª—è GTM...")
    
    # –ü–æ–ª—É—á–∞–µ–º ID –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ GTM BRAND
    response = requests.get(
        f"{SUPABASE_URL}/rest/v1/categories?name=eq.GTM%20BRAND&select=id",
        headers=headers
    )
    
    if response.status_code != 200:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ GTM BRAND: {response.status_code}")
        return False
    
    categories = response.json()
    if not categories:
        print("‚ùå –ö–∞—Ç–µ–≥–æ—Ä–∏—è GTM BRAND –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return False
    
    category_id = categories[0]['id']
    print(f"üìã –ù–∞–π–¥–µ–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è GTM BRAND —Å ID: {category_id}")
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Å–≤—è–∑—å –∞—Ä—Ç–∏—Å—Ç–∞ GTM (ID 14) —Å –∫–∞—Ç–µ–≥–æ—Ä–∏–µ–π GTM BRAND
    artist_category_data = {
        "artist_id": 14,
        "category_id": category_id
    }
    
    response = requests.post(
        f"{SUPABASE_URL}/rest/v1/artist_categories",
        headers=headers,
        json=artist_category_data
    )
    
    if response.status_code in [200, 201]:
        print("‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è GTM BRAND –Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –∞—Ä—Ç–∏—Å—Ç—É GTM")
        return True
    else:
        print(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {response.status_code}")
        return False

def check_all_categories():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π"""
    print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π...")
    
    response = requests.get(
        f"{SUPABASE_URL}/rest/v1/categories?select=id,name,type&order=id",
        headers=headers
    )
    
    if response.status_code == 200:
        categories = response.json()
        print(f"üìä –í—Å–µ–≥–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: {len(categories)}")
        
        for category in categories:
            print(f"  ‚Ä¢ ID {category['id']}: {category['name']} ({category['type']})")
        
        return True
    else:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: {response.status_code}")
        return False

def main():
    print("‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ GTM BRAND")
    print("=" * 60)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    add_missing_categories()
    
    # –ù–∞–∑–Ω–∞—á–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é GTM BRAND
    assign_gtm_brand_category()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    check_all_categories()
    
    print("\n‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")

if __name__ == "__main__":
    main()