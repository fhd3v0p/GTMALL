#!/usr/bin/env python3
"""
GTM Supabase Assets Upload (Fixed)
–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤ –∏–∑ –ø–∞–ø–∫–∏ assets –≤ Supabase Storage —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –ø—É—Ç—è–º–∏
"""
import os
import requests
import json
from pathlib import Path
from dotenv import load_dotenv
import urllib.parse

load_dotenv()

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
SUPABASE_URL = os.getenv('SUPABASE_URL')
SUPABASE_SERVICE_ROLE_KEY = os.getenv('SUPABASE_SERVICE_ROLE_KEY')
SUPABASE_STORAGE_BUCKET = os.getenv('SUPABASE_STORAGE_BUCKET', 'gtm-assets-public')

def sanitize_filename(filename):
    """–û—á–∏—â–∞–µ—Ç –∏–º—è —Ñ–∞–π–ª–∞ –æ—Ç –∫–∏—Ä–∏–ª–ª–∏—Ü—ã –∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤"""
    # –ó–∞–º–µ–Ω—è–µ–º –∫–∏—Ä–∏–ª–ª–∏—Ü—É –Ω–∞ –ª–∞—Ç–∏–Ω–∏—Ü—É
    cyrillic_map = {
        '–∞': 'a', '–±': 'b', '–≤': 'v', '–≥': 'g', '–¥': 'd', '–µ': 'e', '—ë': 'yo',
        '–∂': 'zh', '–∑': 'z', '–∏': 'i', '–π': 'y', '–∫': 'k', '–ª': 'l', '–º': 'm',
        '–Ω': 'n', '–æ': 'o', '–ø': 'p', '—Ä': 'r', '—Å': 's', '—Ç': 't', '—É': 'u',
        '—Ñ': 'f', '—Ö': 'h', '—Ü': 'ts', '—á': 'ch', '—à': 'sh', '—â': 'sch',
        '—ä': '', '—ã': 'y', '—å': '', '—ç': 'e', '—é': 'yu', '—è': 'ya',
        '–ê': 'A', '–ë': 'B', '–í': 'V', '–ì': 'G', '–î': 'D', '–ï': 'E', '–Å': 'YO',
        '–ñ': 'ZH', '–ó': 'Z', '–ò': 'I', '–ô': 'Y', '–ö': 'K', '–õ': 'L', '–ú': 'M',
        '–ù': 'N', '–û': 'O', '–ü': 'P', '–†': 'R', '–°': 'S', '–¢': 'T', '–£': 'U',
        '–§': 'F', '–•': 'H', '–¶': 'TS', '–ß': 'CH', '–®': 'SH', '–©': 'SCH',
        '–™': '', '–´': 'Y', '–¨': '', '–≠': 'E', '–Æ': 'YU', '–Ø': 'YA'
    }
    
    result = ''
    for char in filename:
        if char in cyrillic_map:
            result += cyrillic_map[char]
        elif char.isalnum() or char in '._-':
            result += char
        else:
            result += '_'
    
    return result

def upload_assets():
    print("üì§ –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤ –≤ Supabase Storage (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)...")
    print(f"URL: {SUPABASE_URL}")
    print(f"Bucket: {SUPABASE_STORAGE_BUCKET}")
    
    # Headers –¥–ª—è service role
    service_headers = {
        'apikey': SUPABASE_SERVICE_ROLE_KEY,
        'Authorization': f'Bearer {SUPABASE_SERVICE_ROLE_KEY}',
        'Content-Type': 'application/json'
    }
    
    # –ü—É—Ç—å –∫ –ø–∞–ø–∫–µ assets
    assets_path = Path("../assets")
    if not assets_path.exists():
        print(f"‚ùå –ü–∞–ø–∫–∞ assets –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {assets_path}")
        return False
    
    print(f"üìÅ –ü–∞–ø–∫–∞ assets: {assets_path.absolute()}")
    
    # –°–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ (—Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –ø—É—Ç—è–º–∏)
    files_to_upload = [
        # –ë–∞–Ω–Ω–µ—Ä—ã (–Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ –∫–æ—Ä–Ω–µ assets)
        ("assets/city_selection_banner.png", "banners/city_selection_banner.png"),
        ("assets/master_cloud_banner.png", "banners/master_cloud_banner.png"),
        ("assets/master_detail_banner.png", "banners/master_detail_banner.png"),
        ("assets/role_selection_banner.png", "banners/role_selection_banner.png"),
        ("assets/giveaway_banner.png", "banners/giveaway_banner.png"),
        
        # –ê–≤–∞—Ç–∞—Ä—ã
        ("assets/avatar1.png", "avatars/avatar1.png"),
        ("assets/avatar2.png", "avatars/avatar2.png"),
        ("assets/avatar3.png", "avatars/avatar3.png"),
        ("assets/avatar4.png", "avatars/avatar4.png"),
        ("assets/avatar5.png", "avatars/avatar5.png"),
        ("assets/avatar6.png", "avatars/avatar6.png"),
        
        # –ê—Ä—Ç–∏—Å—Ç—ã (—Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –∫–∏—Ä–∏–ª–ª–∏—Ü—ã)
        ("assets/artists/aspergill/avatar.png", "artists/aspergill/avatar.png"),
        ("assets/artists/Blodivamp/avatar.png", "artists/Blodivamp/avatar.png"),
        ("assets/artists/EMI/avatar.png", "artists/EMI/avatar.png"),
        ("assets/artists/Lin++/avatar.png", "artists/Lin++/avatar.png"),
        ("assets/artists/msk_tattoo_EMI/avatar.png", "artists/msk_tattoo_EMI/avatar.png"),
        ("assets/artists/–ö–ª—É–±–Ω–∏–∫–∞/avatar.png", f"artists/klubnika/avatar.png"),  # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–æ
        ("assets/artists/–ß—É—á—É–Ω–¥—Ä–∞/avatar.png", f"artists/chuchundra/avatar.png"),  # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–æ
    ]
    
    uploaded_count = 0
    total_count = len(files_to_upload)
    
    for local_path, storage_path in files_to_upload:
        full_local_path = Path("../") / local_path
        
        if not full_local_path.exists():
            print(f"‚ö†Ô∏è –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {full_local_path}")
            continue
        
        print(f"üì§ –ó–∞–≥—Ä—É–∂–∞–µ–º: {local_path} ‚Üí {storage_path}")
        
        try:
            with open(full_local_path, 'rb') as file:
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º MIME —Ç–∏–ø
                file_ext = full_local_path.suffix.lower()
                if file_ext == '.png':
                    mime_type = 'image/png'
                elif file_ext == '.jpg' or file_ext == '.jpeg':
                    mime_type = 'image/jpeg'
                else:
                    mime_type = 'application/octet-stream'
                
                files_data = {'file': (storage_path.split('/')[-1], file, mime_type)}
                
                upload_url = f'{SUPABASE_URL}/storage/v1/object/{SUPABASE_STORAGE_BUCKET}/{storage_path}'
                response = requests.post(upload_url, headers=service_headers, files=files_data)
                
                if response.status_code == 200:
                    print(f"  ‚úÖ –£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω")
                    uploaded_count += 1
                else:
                    print(f"  ‚ùå –û—à–∏–±–∫–∞: {response.text[:100]}...")
        except Exception as e:
            print(f"  ‚ùå –û—à–∏–±–∫–∞: {e}")
    
    print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–≥—Ä—É–∑–∫–∏:")
    print(f"  –ó–∞–≥—Ä—É–∂–µ–Ω–æ: {uploaded_count}/{total_count} —Ñ–∞–π–ª–æ–≤")
    
    if uploaded_count > 0:
        print(f"\n‚úÖ –§–∞–π–ª—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –≤ –±–∞–∫–µ—Ç '{SUPABASE_STORAGE_BUCKET}'")
        return True
    else:
        print(f"\n‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª—ã")
        return False

def test_public_access():
    """–¢–µ—Å—Ç –ø—É–±–ª–∏—á–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–º —Ñ–∞–π–ª–∞–º"""
    print(f"\nüåê –¢–µ—Å—Ç –ø—É–±–ª–∏—á–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ–∞–π–ª–∞–º")
    
    # Headers –¥–ª—è anon key
    anon_headers = {
        'apikey': os.getenv('SUPABASE_ANON_KEY'),
        'Authorization': f'Bearer {os.getenv("SUPABASE_ANON_KEY")}',
        'Content-Type': 'application/json'
    }
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –¥–æ—Å—Ç—É–ø –∫ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–º —Ñ–∞–π–ª–∞–º
    test_files = [
        "banners/city_selection_banner.png",
        "avatars/avatar1.png",
        "artists/aspergill/avatar.png",
        "artists/klubnika/avatar.png",  # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–Ω—ã–π —Ñ–∞–π–ª
        "artists/chuchundra/avatar.png"  # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–Ω—ã–π —Ñ–∞–π–ª
    ]
    
    for file_path in test_files:
        test_url = f'{SUPABASE_URL}/storage/v1/object/public/{SUPABASE_STORAGE_BUCKET}/{file_path}'
        print(f"–¢–µ—Å—Ç–∏—Ä—É–µ–º: {file_path}")
        
        try:
            response = requests.get(test_url, headers=anon_headers)
            if response.status_code == 200:
                print(f"  ‚úÖ –î–æ—Å—Ç—É–ø–µ–Ω")
            else:
                print(f"  ‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {response.status_code}")
        except Exception as e:
            print(f"  ‚ùå –û—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    print("üöÄ –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤ –≤ Supabase Storage (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)")
    print("=" * 60)
    
    if upload_assets():
        print("\n‚úÖ –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
        test_public_access()
    else:
        print("\n‚ùå –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å!") 