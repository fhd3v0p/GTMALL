#!/usr/bin/env python3
"""
GTM API Server
–ü—Ä–æ—Å—Ç–æ–π API —Å–µ—Ä–≤–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–æ–≤ –æ—Ç Flutter
"""

import os
import logging
import asyncio
from datetime import datetime
from flask import Flask, request, jsonify
from flask_cors import CORS
from dotenv import load_dotenv

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º Supabase –∫–ª–∏–µ–Ω—Ç
from supabase_client import supabase_client

load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

app = Flask(__name__)
CORS(app)  # –†–∞–∑—Ä–µ—à–∞–µ–º CORS –¥–ª—è Flutter Web

@app.route('/api/check_subscription', methods=['POST'])
async def check_subscription():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        data = request.get_json()
        telegram_id = data.get('telegram_id')
        
        if not telegram_id:
            return jsonify({'error': 'telegram_id is required'}), 400
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_stats = await supabase_client.get_user_stats(telegram_id)
        
        return jsonify({
            'success': True,
            'subscription_tickets': user_stats.get('subscription_tickets', 0),
            'referral_tickets': user_stats.get('referral_tickets', 0),
            'total_tickets': user_stats.get('total_tickets', 0),
            'referral_code': user_stats.get('referral_code', ''),
            'ticket_awarded': False,  # –ë—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–æ –ø–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
            'message': '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∞'
        })
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏: {e}")
        return jsonify({'error': str(e)}), 500

@app.route('/api/user_tickets/<int:telegram_id>', methods=['GET'])
async def get_user_tickets(telegram_id):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –±–∏–ª–µ—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        user_stats = await supabase_client.get_user_stats(telegram_id)
        
        return jsonify({
            'subscription_tickets': user_stats.get('subscription_tickets', 0),
            'referral_tickets': user_stats.get('referral_tickets', 0),
            'total_tickets': user_stats.get('total_tickets', 0),
            'referral_code': user_stats.get('referral_code', '')
        })
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∏–ª–µ—Ç–æ–≤: {e}")
        return jsonify({'error': str(e)}), 500

@app.route('/api/total_tickets_stats', methods=['GET'])
async def get_total_tickets_stats():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±—â–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –±–∏–ª–µ—Ç–æ–≤"""
    try:
        stats = await supabase_client.get_tickets_stats()
        
        return jsonify({
            'total_subscription_tickets': stats.get('total_subscription_tickets', 0),
            'total_referral_tickets': stats.get('total_referral_tickets', 0),
            'total_user_tickets': stats.get('total_user_tickets', 0)
        })
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        return jsonify({'error': str(e)}), 500

@app.route('/api/telegram_bot/check', methods=['POST'])
async def call_telegram_bot_check():
    """–í—ã–∑–æ–≤ –∫–æ–º–∞–Ω–¥—ã /check —É Telegram –±–æ—Ç–∞"""
    try:
        data = request.get_json()
        telegram_id = data.get('telegram_id')
        
        if not telegram_id:
            return jsonify({'error': 'telegram_id is required'}), 400
        
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –≤—ã–∑–æ–≤–∞ –±–æ—Ç–∞
        # –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–∞–≥–ª—É—à–∫—É
        result = await supabase_client.check_subscription_and_award_ticket(telegram_id, True)
        
        return jsonify(result)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤—ã–∑–æ–≤–∞ –±–æ—Ç–∞: {e}")
        return jsonify({'error': str(e)}), 500

@app.route('/api/health', methods=['GET'])
def health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è API"""
    return jsonify({
        'status': 'healthy',
        'timestamp': datetime.now().isoformat(),
        'service': 'GTM API Server'
    })

if __name__ == '__main__':
    port = int(os.getenv('API_PORT', 5000))
    debug = os.getenv('FLASK_ENV') == 'development'
    
    logger.info(f"üöÄ –ó–∞–ø—É—Å–∫ GTM API Server –Ω–∞ –ø–æ—Ä—Ç—É {port}")
    app.run(host='0.0.0.0', port=port, debug=debug) 