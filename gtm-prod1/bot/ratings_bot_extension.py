#!/usr/bin/env python3
"""
–†–∞—Å—à–∏—Ä–µ–Ω–∏–µ –¥–ª—è bot_main.py - –∫–æ–º–∞–Ω–¥—ã —Ä–µ–π—Ç–∏–Ω–≥–∞ –∞—Ä—Ç–∏—Å—Ç–æ–≤
"""

import requests
import json
import re
from telegram import Update
from telegram.ext import ContextTypes

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Supabase
SUPABASE_URL = "https://rxmtovqxjsvogyywyrha.supabase.co"
SUPABASE_ANON_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InJ4bXRvdnF4anN2b2d5eXd5cmhhIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTQ1Mjg1NTAsImV4cCI6MjA3MDEwNDU1MH0.gDkJybktFoi486hbIVwppDfmVQlAR0fM4o4Sl1-AxhE"

headers = {
    'apikey': SUPABASE_ANON_KEY,
    'Authorization': f'Bearer {SUPABASE_ANON_KEY}',
    'Content-Type': 'application/json'
}

class RatingService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ä–µ–π—Ç–∏–Ω–≥–∞–º–∏ –∞—Ä—Ç–∏—Å—Ç–æ–≤"""
    
    @staticmethod
    async def add_rating(artist_name: str, user_id: str, rating: int, comment: str = None) -> dict:
        """–î–æ–±–∞–≤–ª—è–µ—Ç –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç —Ä–µ–π—Ç–∏–Ω–≥ –∞—Ä—Ç–∏—Å—Ç–∞"""
        try:
            response = requests.post(
                f"{SUPABASE_URL}/rest/v1/rpc/add_artist_rating",
                headers=headers,
                json={
                    "artist_name_param": artist_name,
                    "user_id_param": str(user_id),
                    "rating_param": rating,
                    "comment_param": comment
                }
            )
            
            if response.status_code == 200:
                return response.json()
            else:
                return {"success": False, "error": f"HTTP {response.status_code}"}
                
        except Exception as e:
            return {"success": False, "error": str(e)}
    
    @staticmethod
    async def get_rating(artist_name: str) -> dict:
        """–ü–æ–ª—É—á–∞–µ—Ç —Ä–µ–π—Ç–∏–Ω–≥ –∞—Ä—Ç–∏—Å—Ç–∞"""
        try:
            response = requests.post(
                f"{SUPABASE_URL}/rest/v1/rpc/get_artist_rating",
                headers=headers,
                json={"artist_name_param": artist_name}
            )
            
            if response.status_code == 200:
                return response.json()
            else:
                return {"error": f"HTTP {response.status_code}"}
                
        except Exception as e:
            return {"error": str(e)}
    
    @staticmethod
    async def get_all_artists() -> list:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∞—Ä—Ç–∏—Å—Ç–æ–≤"""
        try:
            response = requests.get(
                f"{SUPABASE_URL}/rest/v1/artists?select=name&is_active=eq.true",
                headers=headers
            )
            
            if response.status_code == 200:
                return [artist["name"] for artist in response.json()]
            else:
                return []
                
        except Exception as e:
            return []

# –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ GTMBot
async def rate_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ—Ü–µ–Ω–∫–∏ –∞—Ä—Ç–∏—Å—Ç–∞"""
    user = update.effective_user
    
    if not context.args or len(context.args) < 2:
        help_text = """‚≠ê –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ—Ü–µ–Ω–∫–∏ –∞—Ä—Ç–∏—Å—Ç–∞

üîπ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
/rate <–∏–º—è_–∞—Ä—Ç–∏—Å—Ç–∞> <–æ—Ü–µ–Ω–∫–∞> [–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π]

üîπ –ü—Ä–∏–º–µ—Ä—ã:
/rate Lin++ 5
/rate "–ß—É—á—É–Ω–¥—Ä–∞" 4 "–û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞!"
/rate EMI 5 "–°—É–ø–µ—Ä —Ç–∞—Ç—É!"

üîπ –û—Ü–µ–Ω–∫–∞: –æ—Ç 1 –¥–æ 5 –∑–≤–µ–∑–¥
üîπ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ

üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∞—Ä—Ç–∏—Å—Ç—ã: /artists"""
        
        await update.message.reply_text(help_text)
        return
    
    try:
        # –ü–∞—Ä—Å–∏–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã
        artist_name = context.args[0]
        rating = int(context.args[1])
        comment = " ".join(context.args[2:]) if len(context.args) > 2 else None
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è
        if rating < 1 or rating > 5:
            await update.message.reply_text("‚ùå –û—Ü–µ–Ω–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç 1 –¥–æ 5 –∑–≤–µ–∑–¥")
            return
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–π—Ç–∏–Ω–≥
        result = await RatingService.add_rating(artist_name, user.id, rating, comment)
        
        if result.get("success"):
            stars = "‚≠ê" * rating
            response = f"""‚úÖ –í–∞—à–∞ –æ—Ü–µ–Ω–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!

üé® –ê—Ä—Ç–∏—Å—Ç: {artist_name}
{stars} ({rating}/5)"""
            
            if comment:
                response += f"\nüí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {comment}"
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            rating_info = await RatingService.get_rating(artist_name)
            if not rating_info.get("error"):
                avg_rating = rating_info.get("average_rating", 0)
                total_ratings = rating_info.get("total_ratings", 0)
                
                response += f"\n\nüìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:"
                response += f"\n‚≠ê –°—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥: {avg_rating:.1f}/5"
                response += f"\nüó≥Ô∏è –í—Å–µ–≥–æ –æ—Ü–µ–Ω–æ–∫: {total_ratings}"
            
            await update.message.reply_text(response)
        else:
            error_msg = result.get("error", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞")
            if "Artist not found" in error_msg:
                await update.message.reply_text(f"‚ùå –ê—Ä—Ç–∏—Å—Ç '{artist_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω\n\nüìã –°–ø–∏—Å–æ–∫ –∞—Ä—Ç–∏—Å—Ç–æ–≤: /artists")
            else:
                await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ—Ü–µ–Ω–∫–∏: {error_msg}")
                
    except ValueError:
        await update.message.reply_text("‚ùå –û—Ü–µ–Ω–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º –æ—Ç 1 –¥–æ 5")
    except Exception as e:
        await update.message.reply_text(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")

async def rating_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–µ–π—Ç–∏–Ω–≥–∞ –∞—Ä—Ç–∏—Å—Ç–∞"""
    
    if not context.args:
        await update.message.reply_text("üìä –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /rating <–∏–º—è_–∞—Ä—Ç–∏—Å—Ç–∞>\n\n–ü—Ä–∏–º–µ—Ä: /rating Lin++")
        return
    
    artist_name = " ".join(context.args)
    
    try:
        rating_info = await RatingService.get_rating(artist_name)
        
        if rating_info.get("error"):
            await update.message.reply_text(f"‚ùå –ê—Ä—Ç–∏—Å—Ç '{artist_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω\n\nüìã –°–ø–∏—Å–æ–∫ –∞—Ä—Ç–∏—Å—Ç–æ–≤: /artists")
            return
        
        avg_rating = rating_info.get("average_rating", 0)
        total_ratings = rating_info.get("total_ratings", 0)
        
        if total_ratings == 0:
            response = f"""üìä –†–µ–π—Ç–∏–Ω–≥ –∞—Ä—Ç–∏—Å—Ç–∞ {artist_name}

‚≠ê –û—Ü–µ–Ω–æ–∫ –ø–æ–∫–∞ –Ω–µ—Ç
üí≠ –°—Ç–∞–Ω—å—Ç–µ –ø–µ—Ä–≤—ã–º, –∫—Ç–æ –æ—Ü–µ–Ω–∏—Ç —ç—Ç–æ–≥–æ –∞—Ä—Ç–∏—Å—Ç–∞!

–û—Ü–µ–Ω–∏—Ç—å: /rate {artist_name} <1-5>"""
        else:
            stars = "‚≠ê" * int(round(avg_rating))
            response = f"""üìä –†–µ–π—Ç–∏–Ω–≥ –∞—Ä—Ç–∏—Å—Ç–∞ {artist_name}

{stars} {avg_rating:.1f}/5
üó≥Ô∏è –í—Å–µ–≥–æ –æ—Ü–µ–Ω–æ–∫: {total_ratings}

–û—Ü–µ–Ω–∏—Ç—å: /rate {artist_name} <1-5>"""
        
        await update.message.reply_text(response)
        
    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–µ–π—Ç–∏–Ω–≥–∞: {e}")

async def artists_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–∫–∞–∑–∞ —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö –∞—Ä—Ç–∏—Å—Ç–æ–≤"""
    
    try:
        artists = await RatingService.get_all_artists()
        
        if not artists:
            await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∞—Ä—Ç–∏—Å—Ç–æ–≤")
            return
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∞—Ä—Ç–∏—Å—Ç–æ–≤ –ø–æ –∞–ª—Ñ–∞–≤–∏—Ç—É
        artists_sorted = sorted(artists)
        
        response = "üé® **–ê—Ä—Ç–∏—Å—Ç—ã GTM:**\n\n"
        
        for i, artist in enumerate(artists_sorted, 1):
            response += f"{i}. {artist}\n"
        
        response += f"\nüìä –í—Å–µ–≥–æ –∞—Ä—Ç–∏—Å—Ç–æ–≤: {len(artists)}"
        response += f"\n\n‚≠ê –û—Ü–µ–Ω–∏—Ç—å: /rate <–∏–º—è> <1-5>"
        response += f"\nüìà –†–µ–π—Ç–∏–Ω–≥: /rating <–∏–º—è>"
        
        await update.message.reply_text(response)
        
    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∞—Ä—Ç–∏—Å—Ç–æ–≤: {e}")

# –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –≤ bot_main.py
"""
–î–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –≤ bot_main.py –¥–æ–±–∞–≤—å—Ç–µ –≤ –º–µ—Ç–æ–¥ setup_handlers():

self.application.add_handler(CommandHandler("rate", self.rate_command))
self.application.add_handler(CommandHandler("rating", self.rating_command))  
self.application.add_handler(CommandHandler("artists", self.artists_command))

–ò –¥–æ–±–∞–≤—å—Ç–µ –º–µ—Ç–æ–¥—ã –≤ –∫–ª–∞—Å—Å GTMBot:

async def rate_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
    await rate_command(self, update, context)
    
async def rating_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
    await rating_command(self, update, context)
    
async def artists_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
    await artists_command(self, update, context)
"""