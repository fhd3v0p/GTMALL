#!/usr/bin/env python3
"""
–ü–æ–∏—Å–∫ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö buckets –≤ Supabase
"""

import requests
import json

# –ü–æ–ø—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã API –∫–ª—é—á–µ–π
API_KEYS = [
    "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InJ4bXRvdnF4anN2b2d5eXd5cmhhIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTQ1Mjg1NTAsImV4cCI6MjA3MDEwNDU1MH0.gDkJybktFoi486hbIVwppDfmVQlAR0fM4o4Sl1-AxhE",
    "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InJ4bXRvdnF4anN2b2d5eXd5cmhhIiwicm9sZSI6ImFub24iLCJpYXQiOjE3MzM0MTY5MDcsImV4cCI6MjA0ODk5MjkwN30.B3H8x3q3lPEj7L3lEiOHVWLBNgGEF9bxk3IUJUITpTs"
]

SUPABASE_URL = "https://rxmtovqxjsvogyywyrha.supabase.co"

def try_access_with_key(api_key):
    """–ü–æ–ø—ã—Ç–∫–∞ –¥–æ—Å—Ç—É–ø–∞ —Å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–º –∫–ª—é—á–æ–º"""
    headers = {
        'apikey': api_key,
        'Authorization': f'Bearer {api_key}',
        'Content-Type': 'application/json'
    }
    
    print(f"\nüîë –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–ª—é—á–∞: {api_key[:20]}...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –∫ REST API
    try:
        response = requests.get(f"{SUPABASE_URL}/rest/v1/", headers=headers)
        print(f"   REST API: {response.status_code}")
        if response.status_code != 200:
            return False
    except Exception as e:
        print(f"   REST API –æ—à–∏–±–∫–∞: {e}")
        return False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –∫ Storage API
    try:
        response = requests.get(f"{SUPABASE_URL}/storage/v1/bucket", headers=headers)
        print(f"   Storage API: {response.status_code}")
        
        if response.status_code == 200:
            buckets = response.json()
            print(f"   Buckets –Ω–∞–π–¥–µ–Ω–æ: {len(buckets)}")
            for bucket in buckets:
                print(f"      - {bucket['name']} (public: {bucket.get('public', False)})")
            return buckets
        else:
            print(f"   Storage –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {response.text}")
            return False
    except Exception as e:
        print(f"   Storage –æ—à–∏–±–∫–∞: {e}")
        return False

def test_direct_access():
    """–ü—Ä—è–º–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö bucket –∏–º–µ–Ω"""
    possible_buckets = [
        "gtm-assets",
        "gtm-assets-public", 
        "assets",
        "public",
        "images",
        "uploads"
    ]
    
    print(f"\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä—è–º–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ–∞–π–ª–∞–º...")
    
    for bucket in possible_buckets:
        test_url = f"{SUPABASE_URL}/storage/v1/object/public/{bucket}/test"
        
        try:
            response = requests.head(test_url)
            print(f"   {bucket}: {response.status_code}")
            if response.status_code != 404:  # –ï—Å–ª–∏ –Ω–µ 404, –≤–æ–∑–º–æ–∂–Ω–æ bucket —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
                print(f"      ‚úÖ Bucket {bucket} –º–æ–∂–µ—Ç —Å—É—â–µ—Å—Ç–≤–æ–≤–∞—Ç—å!")
        except Exception as e:
            print(f"   {bucket}: –æ—à–∏–±–∫–∞ {e}")

def main():
    print("üîç –ü–æ–∏—Å–∫ Supabase Storage buckets")
    print("=" * 40)
    
    # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ API –∫–ª—é—á–∏
    for api_key in API_KEYS:
        buckets = try_access_with_key(api_key)
        if buckets:
            print(f"\n‚úÖ –ù–∞–π–¥–µ–Ω—ã buckets —Å –∫–ª—é—á–æ–º {api_key[:20]}...")
            break
    else:
        print("\n‚ùå –ù–∏ –æ–¥–∏–Ω –∫–ª—é—á –Ω–µ –¥–∞–ª –¥–æ—Å—Ç—É–ø –∫ buckets")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä—è–º–æ–π –¥–æ—Å—Ç—É–ø
    test_direct_access()
    
    print("\nüí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
    print("   1. –°–æ–∑–¥–∞—Ç—å bucket —á–µ—Ä–µ–∑ Supabase Dashboard")
    print("   2. –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –ø—É–±–ª–∏—á–Ω—ã–π –¥–æ—Å—Ç—É–ø")
    print("   3. –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª—ã —á–µ—Ä–µ–∑ Dashboard")

if __name__ == "__main__":
    main()