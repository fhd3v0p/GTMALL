#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∞—Ä—Ç–∏—Å—Ç–æ–≤ —Ç–æ–ª—å–∫–æ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö (–±–µ–∑ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤ –≤ Storage)
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç –ø—Ä—è–º—ã–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ —Ñ–∞–π–ª—ã –¥–ª—è –∞–≤–∞—Ç–∞—Ä–æ–≤ –∏ –≥–∞–ª–µ—Ä–µ–∏
"""

import json
import os
import requests
from pathlib import Path

# Supabase –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
SUPABASE_URL = "https://rxmtovqxjsvogyywyrha.supabase.co"
SUPABASE_ANON_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InJ4bXRvdnF4anN2b2d5eXd5cmhhIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTQ1Mjg1NTAsImV4cCI6MjA3MDEwNDU1MH0.gDkJybktFoi486hbIVwppDfmVQlAR0fM4o4Sl1-AxhE"

# –ë–∞–∑–æ–≤—ã–π URL –¥–ª—è assets (–±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –∫–∞–∫ CDN)
CDN_BASE_URL = "/assets/artists"

# –ü—É—Ç—å –∫ –ø–∞–ø–∫–µ —Å –∞—Ä—Ç–∏—Å—Ç–∞–º–∏
ARTISTS_PATH = "../../assets/artists"

def get_headers():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è API –∑–∞–ø—Ä–æ—Å–æ–≤"""
    return {
        'apikey': SUPABASE_ANON_KEY,
        'Authorization': f'Bearer {SUPABASE_ANON_KEY}',
        'Content-Type': 'application/json',
        'Prefer': 'return=minimal'
    }

def read_json_file(file_path):
    """–ß–∏—Ç–∞–µ—Ç JSON —Ñ–∞–π–ª –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ"""
    try:
        with open(file_path, 'r', encoding='utf-8') as f:
            return json.load(f)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è {file_path}: {e}")
        return None

def read_text_file(file_path):
    """–ß–∏—Ç–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ"""
    try:
        with open(file_path, 'r', encoding='utf-8') as f:
            return f.read().strip()
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è {file_path}: {e}")
        return ""

def insert_artist_to_db(artist_data):
    """–í—Å—Ç–∞–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –∞—Ä—Ç–∏—Å—Ç–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
    url = f"{SUPABASE_URL}/rest/v1/artists"
    headers = get_headers()
    
    response = requests.post(url, json=artist_data, headers=headers)
    
    if response.status_code in [200, 201]:
        print(f"‚úÖ –ê—Ä—Ç–∏—Å—Ç {artist_data['name']} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –ë–î")
        return True
    else:
        print(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞—Ä—Ç–∏—Å—Ç–∞ {artist_data['name']}: {response.status_code} - {response.text}")
        return False

def get_artist_id(artist_name):
    """–ü–æ–ª—É—á–∞–µ—Ç ID –∞—Ä—Ç–∏—Å—Ç–∞ –ø–æ –∏–º–µ–Ω–∏"""
    url = f"{SUPABASE_URL}/rest/v1/artists?name=eq.{artist_name}&select=id"
    headers = get_headers()
    
    response = requests.get(url, headers=headers)
    if response.status_code != 200:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –∞—Ä—Ç–∏—Å—Ç–∞ {artist_name}: {response.status_code}")
        return None
    
    artists = response.json()
    if not artists:
        print(f"‚ùå –ê—Ä—Ç–∏—Å—Ç {artist_name} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î")
        return None
    
    return artists[0]['id']

def insert_gallery_images(artist_name, gallery_urls):
    """–í—Å—Ç–∞–≤–ª—è–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≥–∞–ª–µ—Ä–µ–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
    artist_id = get_artist_id(artist_name)
    if not artist_id:
        return False
    
    url = f"{SUPABASE_URL}/rest/v1/artist_gallery"
    headers = get_headers()
    
    success_count = 0
    for gallery_url in gallery_urls:
        gallery_data = {
            "artist_id": artist_id,
            "image_url": gallery_url
        }
        
        response = requests.post(url, json=gallery_data, headers=headers)
        
        if response.status_code in [200, 201]:
            success_count += 1
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≥–∞–ª–µ—Ä–µ–∏ –¥–ª—è {artist_name}: {response.status_code} - {response.text}")
    
    print(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ {success_count}/{len(gallery_urls)} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≥–∞–ª–µ—Ä–µ–∏ –¥–ª—è {artist_name}")
    return success_count > 0

def process_artist_folder(artist_folder_path):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–∞–ø–∫—É –∞—Ä—Ç–∏—Å—Ç–∞ –∏ –∑–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ –ë–î"""
    folder_name = os.path.basename(artist_folder_path)
    print(f"\nüé® –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∞—Ä—Ç–∏—Å—Ç–∞: {folder_name}")
    
    # –ß–∏—Ç–∞–µ–º links.json
    links_file = os.path.join(artist_folder_path, "links.json")
    if not os.path.exists(links_file):
        print(f"‚ùå –§–∞–π–ª links.json –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ {folder_name}")
        return False
    
    links_data = read_json_file(links_file)
    if not links_data:
        print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å links.json –¥–ª—è {folder_name}")
        return False
    
    # –ß–∏—Ç–∞–µ–º bio.txt –µ—Å–ª–∏ –µ—Å—Ç—å
    bio_file = os.path.join(artist_folder_path, "bio.txt")
    bio_content = read_text_file(bio_file) if os.path.exists(bio_file) else ""
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º URL –∞–≤–∞—Ç–∞—Ä–∞
    avatar_url = None
    for ext in ['png', 'jpg']:
        avatar_file = os.path.join(artist_folder_path, f"avatar.{ext}")
        if os.path.exists(avatar_file):
            avatar_url = f"{CDN_BASE_URL}/{folder_name}/avatar.{ext}"
            break
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º URLs –≥–∞–ª–µ—Ä–µ–∏
    gallery_urls = []
    for i in range(1, 11):  # gallery1.jpg - gallery10.jpg
        gallery_file = os.path.join(artist_folder_path, f"gallery{i}.jpg")
        if os.path.exists(gallery_file):
            gallery_url = f"{CDN_BASE_URL}/{folder_name}/gallery{i}.jpg"
            gallery_urls.append(gallery_url)
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    specialties = []
    category = links_data.get('category', '')
    if category == 'Tattoo':
        specialties = ["–ß–µ—Ä–Ω–æ-–±–µ–ª—ã–µ —Ç–∞—Ç—É", "–¶–≤–µ—Ç–Ω—ã–µ —Ç–∞—Ç—É", "–ú–∏–Ω–∏–º–∞–ª–∏–∑–º"]
    elif category == 'Piercing':
        specialties = ["–ü–∏—Ä—Å–∏–Ω–≥ —É—à–µ–π", "–ë–æ–¥–∏ –ø–∏—Ä—Å–∏–Ω–≥", "–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π –ø–∏—Ä—Å–∏–Ω–≥"]
    elif category:
        specialties = [category]
    
    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ë–î (—Ç–æ–ª—å–∫–æ –ø–æ–ª—è –∏–∑ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —Å—Ö–µ–º—ã)
    artist_data = {
        "name": links_data.get('name', folder_name),
        "username": links_data.get('telegram', '').replace('@', '') if links_data.get('telegram') else folder_name.lower(),
        "bio": bio_content or f"–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –º–∞—Å—Ç–µ—Ä {category}",
        "avatar_url": avatar_url,
        "city": links_data.get('city', '–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥'),
        "specialties": specialties,
        "rating": 4.5,
        "telegram": links_data.get('telegram', ''),
        "telegram_url": links_data.get('telegramUrl', ''),
        "tiktok": links_data.get('tiktok', ''),
        "tiktok_url": links_data.get('tiktokUrl', ''),
        "pinterest": links_data.get('pinterest', ''),
        "pinterest_url": links_data.get('pinterestUrl', ''),
        "booking_url": links_data.get('bookingUrl', ''),
        "location_html": links_data.get('locationHtml', ''),
        "is_active": True
    }
    
    # –í—Å—Ç–∞–≤–ª—è–µ–º –∞—Ä—Ç–∏—Å—Ç–∞ –≤ –ë–î
    if insert_artist_to_db(artist_data):
        # –í—Å—Ç–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≥–∞–ª–µ—Ä–µ–∏
        if gallery_urls:
            insert_gallery_images(artist_data['name'], gallery_urls)
        return True
    
    return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –∞—Ä—Ç–∏—Å—Ç–æ–≤ –≤ Supabase –ë–î...")
    
    # –ü–æ–ª—É—á–∞–µ–º –∞–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—É—Ç—å –∫ –ø–∞–ø–∫–µ —Å –∞—Ä—Ç–∏—Å—Ç–∞–º–∏
    script_dir = os.path.dirname(os.path.abspath(__file__))
    artists_dir = os.path.join(script_dir, ARTISTS_PATH)
    artists_dir = os.path.normpath(artists_dir)
    
    print(f"üìÅ –ü—É—Ç—å –∫ –∞—Ä—Ç–∏—Å—Ç–∞–º: {artists_dir}")
    
    if not os.path.exists(artists_dir):
        print(f"‚ùå –ü–∞–ø–∫–∞ —Å –∞—Ä—Ç–∏—Å—Ç–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {artists_dir}")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–∞–ø–æ–∫ –∞—Ä—Ç–∏—Å—Ç–æ–≤
    artist_folders = [
        d for d in os.listdir(artists_dir) 
        if os.path.isdir(os.path.join(artists_dir, d)) and not d.startswith('.')
    ]
    
    print(f"üìä –ù–∞–π–¥–µ–Ω–æ –ø–∞–ø–æ–∫ –∞—Ä—Ç–∏—Å—Ç–æ–≤: {len(artist_folders)}")
    
    success_count = 0
    error_count = 0
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥–æ–≥–æ –∞—Ä—Ç–∏—Å—Ç–∞
    for folder_name in artist_folders:
        artist_folder_path = os.path.join(artists_dir, folder_name)
        
        try:
            if process_artist_folder(artist_folder_path):
                success_count += 1
            else:
                error_count += 1
        except Exception as e:
            print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ {folder_name}: {e}")
            error_count += 1
    
    print(f"\nüìà –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∑–∞–≥—Ä—É–∑–∫–∏:")
    print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ: {success_count}")
    print(f"‚ùå –û—à–∏–±–æ–∫: {error_count}")
    print(f"üìä –í—Å–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {success_count + error_count}")

if __name__ == "__main__":
    main()