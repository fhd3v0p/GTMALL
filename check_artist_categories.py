#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–≤—è–∑–µ–π –∞—Ä—Ç–∏—Å—Ç–∞ GTM —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
"""

import requests
import json

# Supabase Configuration
SUPABASE_URL = "https://rxmtovqxjsvogyywyrha.supabase.co"
SUPABASE_ANON_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InJ4bXRvdnF4anN2b2d5eXd5cmhhIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTQ1Mjg1NTAsImV4cCI6MjA3MDEwNDU1MH0.gDkJybktFoi486hbIVwppDfmVQlAR0fM4o4Sl1-AxhE"

# Headers for Supabase API
HEADERS = {
    'apikey': SUPABASE_ANON_KEY,
    'Authorization': f'Bearer {SUPABASE_ANON_KEY}',
    'Content-Type': 'application/json',
}

def check_artist_categories(artist_id: int):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–≤—è–∑–∏ –∞—Ä—Ç–∏—Å—Ç–∞ —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∞—Ä—Ç–∏—Å—Ç–∞
        response = requests.get(
            f"{SUPABASE_URL}/rest/v1/artists?id=eq.{artist_id}",
            headers=HEADERS
        )
        
        if response.status_code == 200:
            artists = response.json()
            if artists:
                artist = artists[0]
                print(f"üìã –ê—Ä—Ç–∏—Å—Ç ID {artist_id}:")
                print(f"   –ò–º—è: {artist.get('name')}")
                print(f"   –°–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏: {artist.get('specialties')}")
                print(f"   –ì–æ—Ä–æ–¥–∞: {artist.get('city')}")
                print(f"   –ê–∫—Ç–∏–≤–µ–Ω: {artist.get('is_active')}")
                return artist
            else:
                print(f"‚ùå –ê—Ä—Ç–∏—Å—Ç —Å ID {artist_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return None
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞—Ä—Ç–∏—Å—Ç–∞: {response.status_code}")
            return None
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∞—Ä—Ç–∏—Å—Ç–∞: {e}")
        return None

def check_artist_categories_table(artist_id: int):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ç–∞–±–ª–∏—Ü—É artist_categories"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–≤—è–∑–∏ –∞—Ä—Ç–∏—Å—Ç–∞ —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
        response = requests.get(
            f"{SUPABASE_URL}/rest/v1/artist_categories?artist_id=eq.{artist_id}",
            headers=HEADERS
        )
        
        if response.status_code == 200:
            categories = response.json()
            print(f"üìã –°–≤—è–∑–∏ –∞—Ä—Ç–∏—Å—Ç–∞ {artist_id} —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏:")
            for cat in categories:
                print(f"   - –ö–∞—Ç–µ–≥–æ—Ä–∏—è ID: {cat.get('category_id')}")
            return categories
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–≤—è–∑–µ–π: {response.status_code}")
            return []
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å–≤—è–∑–µ–π: {e}")
        return []

def check_all_categories():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    try:
        response = requests.get(
            f"{SUPABASE_URL}/rest/v1/categories",
            headers=HEADERS
        )
        
        if response.status_code == 200:
            categories = response.json()
            print(f"üìã –í—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:")
            for cat in categories:
                print(f"   - ID {cat.get('id')}: {cat.get('name')} ({cat.get('type')})")
            return categories
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π: {response.status_code}")
            return []
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: {e}")
        return []

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–≤—è–∑–∏ –∞—Ä—Ç–∏—Å—Ç–∞ GTM —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—Ä—Ç–∏—Å—Ç–∞ GTM (ID 14)
    artist = check_artist_categories(14)
    
    if artist:
        print("\nüìã –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—É artist_categories...")
        categories = check_artist_categories_table(14)
        
        print("\nüìã –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏...")
        all_categories = check_all_categories()
        
        # –ù–∞—Ö–æ–¥–∏–º ID –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ GTM BRAND
        gtm_brand_id = None
        for cat in all_categories:
            if cat.get('name') == 'GTM BRAND':
                gtm_brand_id = cat.get('id')
                break
        
        if gtm_brand_id:
            print(f"\n‚úÖ ID –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ GTM BRAND: {gtm_brand_id}")
        else:
            print("\n‚ùå –ö–∞—Ç–µ–≥–æ—Ä–∏—è GTM BRAND –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")

if __name__ == "__main__":
    main() 