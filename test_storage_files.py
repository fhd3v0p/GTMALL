#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –≤ Supabase Storage
"""

import requests

# Supabase Configuration
SUPABASE_URL = "https://rxmtovqxjsvogyywyrha.supabase.co"
BUCKET_NAME = "gtm-assets-public"

def test_storage_files():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Ñ–∞–π–ª–æ–≤ –≤ Storage"""
    print("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª—ã –≤ Storage...")
    
    # –°–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
    files_to_check = [
        "products/GTM_Tshirt/avatar.jpg",
        "products/GTM_Tshirt/gallery1.jpg", 
        "products/GTM_Tshirt/gallery2.jpg",
        "products/GTM_Tshirt/gallery3.jpg",
        "artists/14/avatar.png"
    ]
    
    for file_path in files_to_check:
        url = f"{SUPABASE_URL}/storage/v1/object/public/{BUCKET_NAME}/{file_path}"
        try:
            response = requests.head(url)
            status = "‚úÖ –î–æ—Å—Ç—É–ø–µ–Ω" if response.status_code == 200 else "‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
            print(f"üìã {file_path}: {status} (—Å—Ç–∞—Ç—É—Å: {response.status_code})")
        except Exception as e:
            print(f"üìã {file_path}: ‚ùå –û—à–∏–±–∫–∞ - {e}")

def test_product_data():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç–∞ –≤ –±–∞–∑–µ"""
    print(f"\nüîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç–∞...")
    
    SUPABASE_ANON_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InJ4bXRvdnF4anN2b2d5eXd5cmhhIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTQ1Mjg1NTAsImV4cCI6MjA3MDEwNDU1MH0.gDkJybktFoi486hbIVwppDfmVQlAR0fM4o4Sl1-AxhE"
    
    HEADERS = {
        'apikey': SUPABASE_ANON_KEY,
        'Authorization': f'Bearer {SUPABASE_ANON_KEY}',
        'Content-Type': 'application/json',
    }
    
    try:
        response = requests.get(
            f"{SUPABASE_URL}/rest/v1/products?master_id=eq.14",
            headers=HEADERS
        )
        
        if response.status_code == 200:
            products = response.json()
            if products:
                product = products[0]
                print(f"üìã –ü—Ä–æ–¥—É–∫—Ç: {product.get('name')}")
                print(f"   –ê–≤–∞—Ç–∞—Ä: {product.get('avatar')}")
                print(f"   –ì–∞–ª–µ—Ä–µ—è: {product.get('gallery')}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π —Ñ–∞–π–ª –∏–∑ –≥–∞–ª–µ—Ä–µ–∏
                gallery = product.get('gallery', [])
                for i, url in enumerate(gallery):
                    try:
                        response = requests.head(url)
                        status = "‚úÖ –î–æ—Å—Ç—É–ø–µ–Ω" if response.status_code == 200 else "‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
                        print(f"   –ì–∞–ª–µ—Ä–µ—è {i+1}: {status}")
                    except Exception as e:
                        print(f"   –ì–∞–ª–µ—Ä–µ—è {i+1}: ‚ùå –û—à–∏–±–∫–∞ - {e}")
            else:
                print("‚ùå –ü—Ä–æ–¥—É–∫—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–æ–≤: {response.status_code}")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üß™ –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª—ã –≤ Storage
    test_storage_files()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç–∞
    test_product_data()
    
    print(f"\nüéØ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")

if __name__ == "__main__":
    main() 